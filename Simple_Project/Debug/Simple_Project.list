
Simple_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005938  08005938  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005940  08005940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000070  080059b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  080059b8  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f77  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac4  00000000  00000000  00037017  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  00039ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003b010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028139  00000000  00000000  0003c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000100fd  00000000  00000000  00064521  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f30b1  00000000  00000000  0007461e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001676cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dbc  00000000  00000000  0016774c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005890 	.word	0x08005890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005890 	.word	0x08005890

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 ff22 	bl	80013ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f863 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa6d 	bl	8000a6c <MX_GPIO_Init>
    MX_DFSDM1_Init();
 8000592:	f000 f903 	bl	800079c <MX_DFSDM1_Init>
    MX_I2C2_Init();
 8000596:	f000 f939 	bl	800080c <MX_I2C2_Init>
    MX_QUADSPI_Init();
 800059a:	f000 f975 	bl	8000888 <MX_QUADSPI_Init>
    MX_SPI3_Init();
 800059e:	f000 f999 	bl	80008d4 <MX_SPI3_Init>
    MX_USART1_UART_Init();
 80005a2:	f000 f9d5 	bl	8000950 <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 80005a6:	f000 fa03 	bl	80009b0 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 80005aa:	f000 fa31 	bl	8000a10 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
    num1 = 5;
 80005ae:	2305      	movs	r3, #5
 80005b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    num2 =10;
 80005b4:	230a      	movs	r3, #10
 80005b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    val = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Tell TMP102 that we want to read from the temperature register
    buf[0] = REG_TEMP;
 80005be:	2300      	movs	r3, #0
 80005c0:	713b      	strb	r3, [r7, #4]
    ret = HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	b299      	uxth	r1, r3
 80005c6:	1d3a      	adds	r2, r7, #4
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2301      	movs	r3, #1
 80005d0:	481c      	ldr	r0, [pc, #112]	; (8000644 <main+0xc4>)
 80005d2:	f001 fc1f 	bl	8001e14 <HAL_I2C_Master_Transmit>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        strcpy((char*)buf, "Error Rx\r\n");
      } else {
      */
        //Combine the bytes
        //val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
    	val = __QADD16(val,num2);
 80005dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80005e0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005e4:	61ba      	str	r2, [r7, #24]
 80005e6:	617b      	str	r3, [r7, #20]

__STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	fa93 f312 	qadd16	r3, r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
  return(result);
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        //if ( val > 0x7FF ) {
        //  val |= 0xF000;
        //}

        // Convert to float temperature value (Celsius)
        temp_c = val;
 80005f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	edc7 7a07 	vstr	s15, [r7, #28]
        //temp_c = val * 0.0625;

        // Convert temperature to decimal format
        temp_c *= 100;
 8000606:	edd7 7a07 	vldr	s15, [r7, #28]
 800060a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000648 <main+0xc8>
 800060e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000612:	edc7 7a07 	vstr	s15, [r7, #28]
        sprintf((char*)buf,
 8000616:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	490b      	ldr	r1, [pc, #44]	; (800064c <main+0xcc>)
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fd30 	bl	8005084 <siprintf>
              ((unsigned int)val));
     // }
    //}

    // Send out buffer (temperature or error message)
    HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fdd2 	bl	80001d0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <main+0xd0>)
 8000638:	f003 fd02 	bl	8004040 <HAL_UART_Transmit>

    // Wait
    HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f000 ff37 	bl	80014b0 <HAL_Delay>
    buf[0] = REG_TEMP;
 8000642:	e7bc      	b.n	80005be <main+0x3e>
 8000644:	20000580 	.word	0x20000580
 8000648:	42c80000 	.word	0x42c80000
 800064c:	080058a8 	.word	0x080058a8
 8000650:	20000630 	.word	0x20000630

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0b8      	sub	sp, #224	; 0xe0
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fd06 	bl	8005074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2288      	movs	r2, #136	; 0x88
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fcf8 	bl	8005074 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000684:	f002 f80e 	bl	80026a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <SystemClock_Config+0x140>)
 800068a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068e:	4a41      	ldr	r2, [pc, #260]	; (8000794 <SystemClock_Config+0x140>)
 8000690:	f023 0318 	bic.w	r3, r3, #24
 8000694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000698:	2314      	movs	r3, #20
 800069a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006bc:	2301      	movs	r3, #1
 80006be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c8:	2328      	movs	r3, #40	; 0x28
 80006ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f929 	bl	800293c <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006f0:	f000 fb6c 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000716:	2104      	movs	r1, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fcf5 	bl	8003108 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000724:	f000 fb52 	bl	8000dcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemClock_Config+0x144>)
 800072a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000734:	2300      	movs	r3, #0
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800073e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000742:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000744:	2301      	movs	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800074c:	2318      	movs	r3, #24
 800074e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000750:	2307      	movs	r3, #7
 8000752:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800075c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000760:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fed3 	bl	8003510 <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000770:	f000 fb2c 	bl	8000dcc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000778:	f001 ffb2 	bl	80026e0 <HAL_PWREx_ControlVoltageScaling>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000782:	f000 fb23 	bl	8000dcc <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000786:	f003 f9a9 	bl	8003adc <HAL_RCCEx_EnableMSIPLLMode>
}
 800078a:	bf00      	nop
 800078c:	37e0      	adds	r7, #224	; 0xe0
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	00012085 	.word	0x00012085

0800079c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007a2:	4a19      	ldr	r2, [pc, #100]	; (8000808 <MX_DFSDM1_Init+0x6c>)
 80007a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_DFSDM1_Init+0x68>)
 80007f2:	f000 ff91 	bl	8001718 <HAL_DFSDM_ChannelInit>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007fc:	f000 fae6 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000c0 	.word	0x200000c0
 8000808:	40016020 	.word	0x40016020

0800080c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_I2C2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_I2C2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_I2C2_Init+0x74>)
 8000818:	f640 6214 	movw	r2, #3604	; 0xe14
 800081c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_I2C2_Init+0x74>)
 8000826:	2201      	movs	r2, #1
 8000828:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_I2C2_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2C2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_I2C2_Init+0x74>)
 800084a:	f001 fa54 	bl	8001cf6 <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 faba 	bl	8000dcc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <MX_I2C2_Init+0x74>)
 800085c:	f001 fd42 	bl	80022e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000866:	f000 fab1 	bl	8000dcc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2C2_Init+0x74>)
 800086e:	f001 fd84 	bl	800237a <HAL_I2CEx_ConfigDigitalFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000878:	f000 faa8 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000580 	.word	0x20000580
 8000884:	40005800 	.word	0x40005800

08000888 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_QUADSPI_Init+0x44>)
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <MX_QUADSPI_Init+0x48>)
 8000890:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_QUADSPI_Init+0x44>)
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_QUADSPI_Init+0x44>)
 800089a:	2201      	movs	r2, #1
 800089c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_QUADSPI_Init+0x44>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_QUADSPI_Init+0x44>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_QUADSPI_Init+0x44>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_QUADSPI_Init+0x44>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_QUADSPI_Init+0x44>)
 80008b8:	f001 ff78 	bl	80027ac <HAL_QSPI_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008c2:	f000 fa83 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200006d4 	.word	0x200006d4
 80008d0:	a0001000 	.word	0xa0001000

080008d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_SPI3_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_SPI3_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_SPI3_Init+0x74>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI3_Init+0x74>)
 80008ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_SPI3_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI3_Init+0x74>)
 8000902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000906:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI3_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI3_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI3_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_SPI3_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI3_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_SPI3_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI3_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_SPI3_Init+0x74>)
 8000934:	f003 faac 	bl	8003e90 <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 fa45 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200005cc 	.word	0x200005cc
 800094c:	40003c00 	.word	0x40003c00

08000950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART1_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000994:	f003 fb06 	bl	8003fa4 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 fa15 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000630 	.word	0x20000630
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_USART3_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART3_UART_Init+0x58>)
 80009f4:	f003 fad6 	bl	8003fa4 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f9e5 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000f8 	.word	0x200000f8
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2206      	movs	r2, #6
 8000a20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	f001 fcdd 	bl	8002412 <HAL_PCD_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f9b5 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000178 	.word	0x20000178

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4bba      	ldr	r3, [pc, #744]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4ab9      	ldr	r2, [pc, #740]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4bb7      	ldr	r3, [pc, #732]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4bb4      	ldr	r3, [pc, #720]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4ab3      	ldr	r2, [pc, #716]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4bb1      	ldr	r3, [pc, #708]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4bae      	ldr	r3, [pc, #696]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4aad      	ldr	r2, [pc, #692]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4bab      	ldr	r3, [pc, #684]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4ba8      	ldr	r3, [pc, #672]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4aa7      	ldr	r2, [pc, #668]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4ba5      	ldr	r3, [pc, #660]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4ba2      	ldr	r3, [pc, #648]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4aa1      	ldr	r2, [pc, #644]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b9f      	ldr	r3, [pc, #636]	; (8000d6c <MX_GPIO_Init+0x300>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b00:	489b      	ldr	r0, [pc, #620]	; (8000d70 <MX_GPIO_Init+0x304>)
 8000b02:	f001 f8bd 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 f8b6 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000b14:	2200      	movs	r2, #0
 8000b16:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b1a:	4896      	ldr	r0, [pc, #600]	; (8000d74 <MX_GPIO_Init+0x308>)
 8000b1c:	f001 f8b0 	bl	8001c80 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b26:	4894      	ldr	r0, [pc, #592]	; (8000d78 <MX_GPIO_Init+0x30c>)
 8000b28:	f001 f8aa 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	4891      	ldr	r0, [pc, #580]	; (8000d78 <MX_GPIO_Init+0x30c>)
 8000b34:	f001 f8a4 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b3e:	488f      	ldr	r0, [pc, #572]	; (8000d7c <MX_GPIO_Init+0x310>)
 8000b40:	f001 f89e 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2120      	movs	r1, #32
 8000b48:	488a      	ldr	r0, [pc, #552]	; (8000d74 <MX_GPIO_Init+0x308>)
 8000b4a:	f001 f899 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2101      	movs	r1, #1
 8000b52:	4887      	ldr	r0, [pc, #540]	; (8000d70 <MX_GPIO_Init+0x304>)
 8000b54:	f001 f894 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b58:	f240 1315 	movw	r3, #277	; 0x115
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	487f      	ldr	r0, [pc, #508]	; (8000d70 <MX_GPIO_Init+0x304>)
 8000b72:	f000 fedd 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b76:	236a      	movs	r3, #106	; 0x6a
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	4b81      	ldr	r3, [pc, #516]	; (8000d80 <MX_GPIO_Init+0x314>)
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4879      	ldr	r0, [pc, #484]	; (8000d70 <MX_GPIO_Init+0x304>)
 8000b8a:	f000 fed1 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <MX_GPIO_Init+0x318>)
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4876      	ldr	r0, [pc, #472]	; (8000d7c <MX_GPIO_Init+0x310>)
 8000ba4:	f000 fec4 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000ba8:	233f      	movs	r3, #63	; 0x3f
 8000baa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bac:	230b      	movs	r3, #11
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4870      	ldr	r0, [pc, #448]	; (8000d7c <MX_GPIO_Init+0x310>)
 8000bbc:	f000 feb8 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f000 fea7 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000be2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fe97 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c12:	2301      	movs	r3, #1
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 fe86 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c24:	2310      	movs	r3, #16
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 fe79 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c3e:	23e0      	movs	r3, #224	; 0xe0
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fe68 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c60:	2301      	movs	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <MX_GPIO_Init+0x314>)
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4840      	ldr	r0, [pc, #256]	; (8000d74 <MX_GPIO_Init+0x308>)
 8000c74:	f000 fe5c 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	483a      	ldr	r0, [pc, #232]	; (8000d74 <MX_GPIO_Init+0x308>)
 8000c8c:	f000 fe50 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000c90:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c94:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4832      	ldr	r0, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x308>)
 8000caa:	f000 fe41 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000cae:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000cb2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <MX_GPIO_Init+0x314>)
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482d      	ldr	r0, [pc, #180]	; (8000d78 <MX_GPIO_Init+0x30c>)
 8000cc4:	f000 fe34 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cc8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <MX_GPIO_Init+0x30c>)
 8000ce2:	f000 fe25 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ce6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481f      	ldr	r0, [pc, #124]	; (8000d7c <MX_GPIO_Init+0x310>)
 8000d00:	f000 fe16 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_GPIO_Init+0x314>)
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_GPIO_Init+0x310>)
 8000d1a:	f000 fe09 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <MX_GPIO_Init+0x30c>)
 8000d3a:	f000 fdf9 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d3e:	2378      	movs	r3, #120	; 0x78
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_GPIO_Init+0x30c>)
 8000d5a:	f000 fde9 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d64:	2312      	movs	r3, #18
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e00d      	b.n	8000d88 <MX_GPIO_Init+0x31c>
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48001000 	.word	0x48001000
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48000c00 	.word	0x48000c00
 8000d7c:	48000800 	.word	0x48000800
 8000d80:	10110000 	.word	0x10110000
 8000d84:	10210000 	.word	0x10210000
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <MX_GPIO_Init+0x35c>)
 8000d9a:	f000 fdc9 	bl	8001930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2017      	movs	r0, #23
 8000da4:	f000 fc81 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000da8:	2017      	movs	r0, #23
 8000daa:	f000 fc9a 	bl	80016e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f000 fc79 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db8:	2028      	movs	r0, #40	; 0x28
 8000dba:	f000 fc92 	bl	80016e2 <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	48000400 	.word	0x48000400

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_MspInit+0x44>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x44>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d128      	bne.n	8000e96 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e74:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e86:	2306      	movs	r3, #6
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e92:	f000 fd4d 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000008c 	.word	0x2000008c
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48001000 	.word	0x48001000

08000eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_I2C_MspInit+0x7c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d128      	bne.n	8000f20 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_I2C_MspInit+0x80>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_I2C_MspInit+0x80>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_I2C_MspInit+0x80>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ee6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eec:	2312      	movs	r3, #18
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_I2C_MspInit+0x84>)
 8000f04:	f000 fd14 	bl	8001930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_I2C_MspInit+0x80>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_I2C_MspInit+0x80>)
 8000f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f12:	6593      	str	r3, [r2, #88]	; 0x58
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_I2C_MspInit+0x80>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40005800 	.word	0x40005800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000400 	.word	0x48000400

08000f34 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_QSPI_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d128      	bne.n	8000fa8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_QSPI_MspInit+0x80>)
 8000f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_QSPI_MspInit+0x80>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6513      	str	r3, [r2, #80]	; 0x50
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_QSPI_MspInit+0x80>)
 8000f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_QSPI_MspInit+0x80>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_QSPI_MspInit+0x80>)
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_QSPI_MspInit+0x80>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8000f86:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f8a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_QSPI_MspInit+0x84>)
 8000fa4:	f000 fcc4 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	a0001000 	.word	0xa0001000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48001000 	.word	0x48001000

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_SPI_MspInit+0x7c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d128      	bne.n	8001030 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_SPI_MspInit+0x80>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800100e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001020:	2306      	movs	r3, #6
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_SPI_MspInit+0x84>)
 800102c:	f000 fc80 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40003c00 	.word	0x40003c00
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2e      	ldr	r2, [pc, #184]	; (800111c <HAL_UART_MspInit+0xd8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_UART_MspInit+0xdc>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_UART_MspInit+0xdc>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6613      	str	r3, [r2, #96]	; 0x60
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_UART_MspInit+0xdc>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_UART_MspInit+0xdc>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <HAL_UART_MspInit+0xdc>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_UART_MspInit+0xdc>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a6:	2307      	movs	r3, #7
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	481c      	ldr	r0, [pc, #112]	; (8001124 <HAL_UART_MspInit+0xe0>)
 80010b2:	f000 fc3d 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010b6:	e02d      	b.n	8001114 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_UART_MspInit+0xe4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d128      	bne.n	8001114 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_UART_MspInit+0xdc>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <HAL_UART_MspInit+0xdc>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6593      	str	r3, [r2, #88]	; 0x58
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_UART_MspInit+0xdc>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_UART_MspInit+0xdc>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <HAL_UART_MspInit+0xdc>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_UART_MspInit+0xdc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <HAL_UART_MspInit+0xe8>)
 8001110:	f000 fc0e 	bl	8001930 <HAL_GPIO_Init>
}
 8001114:	bf00      	nop
 8001116:	3730      	adds	r7, #48	; 0x30
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013800 	.word	0x40013800
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400
 8001128:	40004800 	.word	0x40004800
 800112c:	48000c00 	.word	0x48000c00

08001130 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001150:	d154      	bne.n	80011fc <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800116a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f000 fbd5 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001186:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001198:	230a      	movs	r3, #10
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fbc3 	bl	8001930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d114      	bne.n	80011f8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6593      	str	r3, [r2, #88]	; 0x58
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80011e6:	f001 fad1 	bl	800278c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_PCD_MspInit+0xd4>)
 80011f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011f6:	e001      	b.n	80011fc <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80011f8:	f001 fac8 	bl	800278c <HAL_PWREx_EnableVddUSB>
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f90a 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001268:	2020      	movs	r0, #32
 800126a:	f000 fd21 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800126e:	2040      	movs	r0, #64	; 0x40
 8001270:	f000 fd1e 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001274:	2080      	movs	r0, #128	; 0x80
 8001276:	f000 fd1b 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800127a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800127e:	f000 fd17 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}

08001286 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800128a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800128e:	f000 fd0f 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001292:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001296:	f000 fd0b 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800129a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800129e:	f000 fd07 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012a6:	f000 fd03 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ae:	f000 fcff 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x50>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x16>
		heap_end = &end;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <_sbrk+0x50>)
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <_sbrk+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <_sbrk+0x50>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <_sbrk+0x50>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	466a      	mov	r2, sp
 80012de:	4293      	cmp	r3, r2
 80012e0:	d907      	bls.n	80012f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012e2:	f003 fe9d 	bl	8005020 <__errno>
 80012e6:	4602      	mov	r2, r0
 80012e8:	230c      	movs	r3, #12
 80012ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	e006      	b.n	8001300 <_sbrk+0x48>
	}

	heap_end += incr;
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <_sbrk+0x50>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a03      	ldr	r2, [pc, #12]	; (8001308 <_sbrk+0x50>)
 80012fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000090 	.word	0x20000090
 800130c:	20000728 	.word	0x20000728

08001310 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <SystemInit+0x64>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <SystemInit+0x64>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SystemInit+0x68>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <SystemInit+0x68>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SystemInit+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <SystemInit+0x68>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <SystemInit+0x68>)
 800133c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001340:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001344:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SystemInit+0x68>)
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <SystemInit+0x68>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <SystemInit+0x68>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SystemInit+0x68>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SystemInit+0x64>)
 8001362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001366:	609a      	str	r2, [r3, #8]
#endif
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	40021000 	.word	0x40021000

0800137c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001380:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001382:	e003      	b.n	800138c <LoopCopyDataInit>

08001384 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001386:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001388:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800138a:	3104      	adds	r1, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001390:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001392:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001394:	d3f6      	bcc.n	8001384 <CopyDataInit>
	ldr	r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001398:	e002      	b.n	80013a0 <LoopFillZerobss>

0800139a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800139a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800139c:	f842 3b04 	str.w	r3, [r2], #4

080013a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <LoopForever+0x16>)
	cmp	r2, r3
 80013a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013a4:	d3f9      	bcc.n	800139a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013a6:	f7ff ffb3 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 fe3f 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ae:	f7ff f8e7 	bl	8000580 <main>

080013b2 <LoopForever>:

LoopForever:
    b LoopForever
 80013b2:	e7fe      	b.n	80013b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013b4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013b8:	08005948 	.word	0x08005948
	ldr	r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013c0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80013c4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80013c8:	20000724 	.word	0x20000724

080013cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC1_2_IRQHandler>

080013ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f95b 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f80e 	bl	8001400 <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	e001      	b.n	80013f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f0:	f7ff fcf4 	bl	8000ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_InitTick+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d022      	beq.n	800145a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_InitTick+0x6c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_InitTick+0x68>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001420:	fbb1 f3f3 	udiv	r3, r1, r3
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f968 	bl	80016fe <HAL_SYSTICK_Config>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10f      	bne.n	8001454 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d809      	bhi.n	800144e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	2200      	movs	r2, #0
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f000 f932 	bl	80016aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0x70>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e007      	b.n	800145e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e004      	b.n	800145e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e001      	b.n	800145e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x1c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x20>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x1c>)
 8001484:	6013      	str	r3, [r2, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	2000071c 	.word	0x2000071c
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000071c 	.word	0x2000071c

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d004      	beq.n	80014d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_Delay+0x40>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d4:	bf00      	nop
 80014d6:	f7ff ffdf 	bl	8001498 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d8f7      	bhi.n	80014d6 <HAL_Delay+0x26>
  {
  }
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0ac      	b.n	8001884 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f8b2 	bl	8001898 <DFSDM_GetChannelFromInstance>
 8001734:	4602      	mov	r2, r0
 8001736:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_DFSDM_ChannelInit+0x174>)
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e09f      	b.n	8001884 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fb6d 	bl	8000e24 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800174a:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_DFSDM_ChannelInit+0x178>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_DFSDM_ChannelInit+0x178>)
 8001752:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001754:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_DFSDM_ChannelInit+0x178>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d125      	bne.n	80017a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 8001762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001766:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4948      	ldr	r1, [pc, #288]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a46      	ldr	r2, [pc, #280]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 800177c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001780:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d108      	bne.n	800179c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	493f      	ldr	r1, [pc, #252]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800179c:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <HAL_DFSDM_ChannelInit+0x17c>)
 80017a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80017b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6819      	ldr	r1, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020f 	bic.w	r2, r2, #15
 80017e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800180c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f002 0207 	and.w	r2, r2, #7
 8001838:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001864:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f810 	bl	8001898 <DFSDM_GetChannelFromInstance>
 8001878:	4601      	mov	r1, r0
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_DFSDM_ChannelInit+0x174>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000098 	.word	0x20000098
 8001890:	20000094 	.word	0x20000094
 8001894:	40016000 	.word	0x40016000

08001898 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <DFSDM_GetChannelFromInstance+0x7c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d102      	bne.n	80018ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e02b      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <DFSDM_GetChannelFromInstance+0x80>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d102      	bne.n	80018bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e024      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <DFSDM_GetChannelFromInstance+0x84>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d102      	bne.n	80018ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e01d      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <DFSDM_GetChannelFromInstance+0x88>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d102      	bne.n	80018d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018d2:	2304      	movs	r3, #4
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e016      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <DFSDM_GetChannelFromInstance+0x8c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018e0:	2305      	movs	r3, #5
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e00f      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <DFSDM_GetChannelFromInstance+0x90>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d102      	bne.n	80018f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018ee:	2306      	movs	r3, #6
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e008      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <DFSDM_GetChannelFromInstance+0x94>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d102      	bne.n	8001902 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018fc:	2307      	movs	r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e001      	b.n	8001906 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001902:	2303      	movs	r3, #3
 8001904:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40016000 	.word	0x40016000
 8001918:	40016020 	.word	0x40016020
 800191c:	40016040 	.word	0x40016040
 8001920:	40016080 	.word	0x40016080
 8001924:	400160a0 	.word	0x400160a0
 8001928:	400160c0 	.word	0x400160c0
 800192c:	400160e0 	.word	0x400160e0

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e17f      	b.n	8001c40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8171 	beq.w	8001c3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d00b      	beq.n	8001978 <HAL_GPIO_Init+0x48>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800196c:	2b11      	cmp	r3, #17
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b12      	cmp	r3, #18
 8001976:	d130      	bne.n	80019da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ae:	2201      	movs	r2, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	f003 0201 	and.w	r2, r3, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d118      	bne.n	8001a18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x128>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d123      	bne.n	8001aa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	08da      	lsrs	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	6939      	ldr	r1, [r7, #16]
 8001a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80ac 	beq.w	8001c3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6613      	str	r3, [r2, #96]	; 0x60
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <HAL_GPIO_Init+0x32c>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <HAL_GPIO_Init+0x330>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x242>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <HAL_GPIO_Init+0x334>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x23e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_GPIO_Init+0x338>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x23a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_GPIO_Init+0x33c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x236>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	; (8001c70 <HAL_GPIO_Init+0x340>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x232>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4a      	ldr	r2, [pc, #296]	; (8001c74 <HAL_GPIO_Init+0x344>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x22e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x348>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x22a>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x244>
 8001b72:	2300      	movs	r3, #0
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b84:	4936      	ldr	r1, [pc, #216]	; (8001c60 <HAL_GPIO_Init+0x330>)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be6:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_GPIO_Init+0x34c>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f ae78 	bne.w	8001940 <HAL_GPIO_Init+0x10>
  }
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000800 	.word	0x48000800
 8001c6c:	48000c00 	.word	0x48000c00
 8001c70:	48001000 	.word	0x48001000
 8001c74:	48001400 	.word	0x48001400
 8001c78:	48001800 	.word	0x48001800
 8001c7c:	40010400 	.word	0x40010400

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f806 	bl	8001ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e081      	b.n	8001e0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff f8c5 	bl	8000eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2224      	movs	r2, #36	; 0x24
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d104      	bne.n	8001d90 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	ea42 0103 	orr.w	r1, r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	021a      	lsls	r2, r3, #8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69d9      	ldr	r1, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	817b      	strh	r3, [r7, #10]
 8001e24:	4613      	mov	r3, r2
 8001e26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	f040 80da 	bne.w	8001fea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x30>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0d3      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fb24 	bl	8001498 <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2319      	movs	r3, #25
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f8f0 	bl	8002044 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0be      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2221      	movs	r2, #33	; 0x21
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	893a      	ldrh	r2, [r7, #8]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	d90e      	bls.n	8001ebe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	8979      	ldrh	r1, [r7, #10]
 8001eae:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f9e6 	bl	8002288 <I2C_TransferConfig>
 8001ebc:	e06c      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9d5 	bl	8002288 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ede:	e05b      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	6a39      	ldr	r1, [r7, #32]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f8ed 	bl	80020c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e07b      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d034      	beq.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d130      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f87f 	bl	8002044 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04d      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d90e      	bls.n	8001f78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f989 	bl	8002288 <I2C_TransferConfig>
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	8979      	ldrh	r1, [r7, #10]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f978 	bl	8002288 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d19e      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6a39      	ldr	r1, [r7, #32]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f8cc 	bl	8002144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01a      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fca:	400b      	ands	r3, r1
 8001fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	80002000 	.word	0x80002000
 8001ff8:	fe00e800 	.word	0xfe00e800

08001ffc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d103      	bne.n	800201a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d007      	beq.n	8002038 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	619a      	str	r2, [r3, #24]
  }
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002054:	e022      	b.n	800209c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d01e      	beq.n	800209c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff fa1b 	bl	8001498 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d113      	bne.n	800209c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e00f      	b.n	80020bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4013      	ands	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d0cd      	beq.n	8002056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020d0:	e02c      	b.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f870 	bl	80021bc <I2C_IsAcknowledgeFailed>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e02a      	b.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d01e      	beq.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff f9d3 	bl	8001498 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d113      	bne.n	800212c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e007      	b.n	800213c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d1cb      	bne.n	80020d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002150:	e028      	b.n	80021a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f830 	bl	80021bc <I2C_IsAcknowledgeFailed>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e026      	b.n	80021b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7ff f997 	bl	8001498 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d113      	bne.n	80021a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e007      	b.n	80021b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d1cf      	bne.n	8002152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d151      	bne.n	800227a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d6:	e022      	b.n	800221e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d01e      	beq.n	800221e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7ff f95a 	bl	8001498 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <I2C_IsAcknowledgeFailed+0x3a>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f043 0220 	orr.w	r2, r3, #32
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e02e      	b.n	800227c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b20      	cmp	r3, #32
 800222a:	d1d5      	bne.n	80021d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2210      	movs	r2, #16
 8002232:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fedd 	bl	8001ffc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <I2C_IsAcknowledgeFailed+0xc8>)
 800224e:	400b      	ands	r3, r1
 8002250:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fe00e800 	.word	0xfe00e800

08002288 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	817b      	strh	r3, [r7, #10]
 8002296:	4613      	mov	r3, r2
 8002298:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	0d5b      	lsrs	r3, r3, #21
 80022a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <I2C_TransferConfig+0x58>)
 80022aa:	430b      	orrs	r3, r1
 80022ac:	43db      	mvns	r3, r3
 80022ae:	ea02 0103 	and.w	r1, r2, r3
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b8:	7a7b      	ldrb	r3, [r7, #9]
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	03ff63ff 	.word	0x03ff63ff

080022e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d138      	bne.n	800236c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002304:	2302      	movs	r3, #2
 8002306:	e032      	b.n	800236e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	d139      	bne.n	8002404 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800239a:	2302      	movs	r3, #2
 800239c:	e033      	b.n	8002406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2224      	movs	r2, #36	; 0x24
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002414:	b08f      	sub	sp, #60	; 0x3c
 8002416:	af0a      	add	r7, sp, #40	; 0x28
 8002418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e116      	b.n	8002652 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fe76 	bl	8001130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fba6 	bl	8004bb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	687e      	ldr	r6, [r7, #4]
 8002470:	466d      	mov	r5, sp
 8002472:	f106 0410 	add.w	r4, r6, #16
 8002476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002482:	e885 0003 	stmia.w	r5, {r0, r1}
 8002486:	1d33      	adds	r3, r6, #4
 8002488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f002 fb40 	bl	8004b10 <USB_CoreInit>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0d7      	b.n	8002652 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 fb94 	bl	8004bd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e04a      	b.n	800254a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	333d      	adds	r3, #61	; 0x3d
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333c      	adds	r3, #60	; 0x3c
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	b298      	uxth	r0, r3
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3342      	adds	r3, #66	; 0x42
 80024f0:	4602      	mov	r2, r0
 80024f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	333f      	adds	r3, #63	; 0x3f
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3344      	adds	r3, #68	; 0x44
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3348      	adds	r3, #72	; 0x48
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3350      	adds	r3, #80	; 0x50
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	3301      	adds	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d3af      	bcc.n	80024b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e044      	b.n	80025e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3301      	adds	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3b5      	bcc.n	800255a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	687e      	ldr	r6, [r7, #4]
 80025f6:	466d      	mov	r5, sp
 80025f8:	f106 0410 	add.w	r4, r6, #16
 80025fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002608:	e885 0003 	stmia.w	r5, {r0, r1}
 800260c:	1d33      	adds	r3, r6, #4
 800260e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f002 fb0b 	bl	8004c2c <USB_DevInit>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e014      	b.n	8002652 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	2b01      	cmp	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f80a 	bl	800265a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fc9b 	bl	8004f86 <USB_DevDisconnect>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800265a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	f043 0303 	orr.w	r3, r3, #3
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40007000 	.word	0x40007000

080026c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <HAL_PWREx_GetVoltageRange+0x18>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ee:	d130      	bne.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fc:	d038      	beq.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2232      	movs	r2, #50	; 0x32
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002724:	e002      	b.n	800272c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3b01      	subs	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002738:	d102      	bne.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f2      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d110      	bne.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e00f      	b.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d007      	beq.n	8002770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000
 8002784:	20000000 	.word	0x20000000
 8002788:	431bde83 	.word	0x431bde83

0800278c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279a:	6053      	str	r3, [r2, #4]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40007000 	.word	0x40007000

080027ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7fe fe70 	bl	8001498 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e06f      	b.n	80028a4 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_QSPI_Init+0x28>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e067      	b.n	80028a4 <HAL_QSPI_Init+0xf8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe fb9f 	bl	8000f34 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80027f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f858 	bl	80028b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	3b01      	subs	r3, #1
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	2120      	movs	r1, #32
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f850 	bl	80028cc <QSPI_WaitFlagStateUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d131      	bne.n	800289a <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002840:	f023 0310 	bic.w	r3, r3, #16
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6852      	ldr	r2, [r2, #4]
 8002848:	0611      	lsls	r1, r2, #24
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	430b      	orrs	r3, r1
 8002856:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_QSPI_Init+0x100>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6912      	ldr	r2, [r2, #16]
 8002866:	0411      	lsls	r1, r2, #16
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6952      	ldr	r2, [r2, #20]
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6992      	ldr	r2, [r2, #24]
 8002872:	4311      	orrs	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	430b      	orrs	r3, r1
 800287a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80028a2:	7afb      	ldrb	r3, [r7, #11]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	ffe0f8fe 	.word	0xffe0f8fe

080028b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028dc:	e01a      	b.n	8002914 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d016      	beq.n	8002914 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e6:	f7fe fdd7 	bl	8001498 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2204      	movs	r2, #4
 8002900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e00e      	b.n	8002932 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d1d6      	bne.n	80028de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e3d4      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	4ba1      	ldr	r3, [pc, #644]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002958:	4b9e      	ldr	r3, [pc, #632]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80e4 	beq.w	8002b38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_RCC_OscConfig+0x4a>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	f040 808b 	bne.w	8002a94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 8087 	bne.w	8002a94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002986:	4b93      	ldr	r3, [pc, #588]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e3ac      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_RCC_OscConfig+0x7c>
 80029ae:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b6:	e005      	b.n	80029c4 <HAL_RCC_OscConfig+0x88>
 80029b8:	4b86      	ldr	r3, [pc, #536]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d223      	bcs.n	8002a10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fd3f 	bl	8003450 <RCC_SetFlashLatencyFromMSIRange>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e38d      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029dc:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029e2:	f043 0308 	orr.w	r3, r3, #8
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4977      	ldr	r1, [pc, #476]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fa:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4972      	ldr	r1, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
 8002a0e:	e025      	b.n	8002a5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a10:	4b70      	ldr	r3, [pc, #448]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6f      	ldr	r2, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a16:	f043 0308 	orr.w	r3, r3, #8
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	496a      	ldr	r1, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a2e:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	4965      	ldr	r1, [pc, #404]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fcff 	bl	8003450 <RCC_SetFlashLatencyFromMSIRange>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e34d      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a5c:	f000 fc36 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 8002a60:	4601      	mov	r1, r0
 8002a62:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	4a5a      	ldr	r2, [pc, #360]	; (8002bd8 <HAL_RCC_OscConfig+0x29c>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa21 f303 	lsr.w	r3, r1, r3
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_OscConfig+0x2a0>)
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a7c:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <HAL_RCC_OscConfig+0x2a4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fcbd 	bl	8001400 <HAL_InitTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d052      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	e331      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d032      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4c      	ldr	r2, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fcf6 	bl	8001498 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fcf2 	bl	8001498 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e31a      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac2:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	493b      	ldr	r1, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	4936      	ldr	r1, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
 8002b00:	e01a      	b.n	8002b38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fcc3 	bl	8001498 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b16:	f7fe fcbf 	bl	8001498 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e2e7      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b28:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x1da>
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d074      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x21a>
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d10e      	bne.n	8002b6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d10b      	bne.n	8002b6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b56:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d064      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2f0>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d160      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e2c4      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_OscConfig+0x24a>
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	e01d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x286>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCC_OscConfig+0x26e>
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x286>
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fc65 	bl	8001498 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd0:	e011      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2ba>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	080058bc 	.word	0x080058bc
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fc58 	bl	8001498 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e280      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4baf      	ldr	r3, [pc, #700]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2a8>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fc48 	bl	8001498 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fc44 	bl	8001498 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e26c      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1e:	4ba5      	ldr	r3, [pc, #660]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2d0>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d060      	beq.n	8002cfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x310>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d119      	bne.n	8002c7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d116      	bne.n	8002c7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c4c:	4b99      	ldr	r3, [pc, #612]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x328>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e249      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c64:	4b93      	ldr	r3, [pc, #588]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	4990      	ldr	r1, [pc, #576]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c78:	e040      	b.n	8002cfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d023      	beq.n	8002cca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c82:	4b8c      	ldr	r3, [pc, #560]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a8b      	ldr	r2, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fc03 	bl	8001498 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe fbff 	bl	8001498 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e227      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca8:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	497c      	ldr	r1, [pc, #496]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
 8002cc8:	e018      	b.n	8002cfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	4b7a      	ldr	r3, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a79      	ldr	r2, [pc, #484]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fbdf 	bl	8001498 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe fbdb 	bl	8001498 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e203      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf0:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d03c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d16:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe fbba 	bl	8001498 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fbb6 	bl	8001498 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1de      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3a:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ef      	beq.n	8002d28 <HAL_RCC_OscConfig+0x3ec>
 8002d48:	e01b      	b.n	8002d82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4a:	4b5a      	ldr	r3, [pc, #360]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fb9d 	bl	8001498 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fb99 	bl	8001498 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1c1      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d74:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ef      	bne.n	8002d62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80a6 	beq.w	8002edc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d90:	2300      	movs	r3, #0
 8002d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d94:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dac:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <HAL_RCC_OscConfig+0x57c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d118      	bne.n	8002dfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_OscConfig+0x57c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <HAL_RCC_OscConfig+0x57c>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fb60 	bl	8001498 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fb5c 	bl	8001498 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e184      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_RCC_OscConfig+0x57c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d108      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4d8>
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e12:	e024      	b.n	8002e5e <HAL_RCC_OscConfig+0x522>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d110      	bne.n	8002e3e <HAL_RCC_OscConfig+0x502>
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e3c:	e00f      	b.n	8002e5e <HAL_RCC_OscConfig+0x522>
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe fb17 	bl	8001498 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fb13 	bl	8001498 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e139      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_OscConfig+0x578>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ed      	beq.n	8002e6e <HAL_RCC_OscConfig+0x532>
 8002e92:	e01a      	b.n	8002eca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fb00 	bl	8001498 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e9a:	e00f      	b.n	8002ebc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fafc 	bl	8001498 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d906      	bls.n	8002ebc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e122      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ebc:	4b90      	ldr	r3, [pc, #576]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e8      	bne.n	8002e9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed0:	4b8b      	ldr	r3, [pc, #556]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	4a8a      	ldr	r2, [pc, #552]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8108 	beq.w	80030f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	f040 80d0 	bne.w	8003090 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 0203 	and.w	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d130      	bne.n	8002f66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d127      	bne.n	8002f66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d11f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f30:	2a07      	cmp	r2, #7
 8002f32:	bf14      	ite	ne
 8002f34:	2201      	movne	r2, #1
 8002f36:	2200      	moveq	r2, #0
 8002f38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d113      	bne.n	8002f66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d06e      	beq.n	8003044 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d069      	beq.n	8003040 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f6c:	4b64      	ldr	r3, [pc, #400]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f78:	4b61      	ldr	r3, [pc, #388]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b7      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f88:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f94:	f7fe fa80 	bl	8001498 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fa7c 	bl	8001498 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0a4      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fae:	4b54      	ldr	r3, [pc, #336]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_RCC_OscConfig+0x7c8>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd4:	0212      	lsls	r2, r2, #8
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fdc:	0852      	lsrs	r2, r2, #1
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	0552      	lsls	r2, r2, #21
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fe8:	0852      	lsrs	r2, r2, #1
 8002fea:	3a01      	subs	r2, #1
 8002fec:	0652      	lsls	r2, r2, #25
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff4:	0912      	lsrs	r2, r2, #4
 8002ff6:	0452      	lsls	r2, r2, #17
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	4941      	ldr	r1, [pc, #260]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003000:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3e      	ldr	r2, [pc, #248]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800300c:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003018:	f7fe fa3e 	bl	8001498 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fa3a 	bl	8001498 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e062      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003032:	4b33      	ldr	r3, [pc, #204]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303e:	e05a      	b.n	80030f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e059      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d152      	bne.n	80030f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a27      	ldr	r2, [pc, #156]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003068:	f7fe fa16 	bl	8001498 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fa12 	bl	8001498 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e03a      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x734>
 800308e:	e032      	b.n	80030f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d02d      	beq.n	80030f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 80030b4:	f023 0303 	bic.w	r3, r3, #3
 80030b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 80030c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f9e5 	bl	8001498 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe f9e1 	bl	8001498 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e009      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x796>
 80030f0:	e001      	b.n	80030f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	f99d808c 	.word	0xf99d808c

08003108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0c8      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b66      	ldr	r3, [pc, #408]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 0207 	bic.w	r2, r3, #7
 8003132:	4961      	ldr	r1, [pc, #388]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b0      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d04c      	beq.n	80031f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003160:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d121      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e09e      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003178:	4b50      	ldr	r3, [pc, #320]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e092      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003190:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e086      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a0:	4b46      	ldr	r3, [pc, #280]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e07e      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 0203 	bic.w	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	493f      	ldr	r1, [pc, #252]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c2:	f7fe f969 	bl	8001498 <HAL_GetTick>
 80031c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ca:	f7fe f965 	bl	8001498 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e066      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 020c 	and.w	r2, r3, #12
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d1eb      	bne.n	80031ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fe:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	492c      	ldr	r1, [pc, #176]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d210      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4924      	ldr	r1, [pc, #144]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e036      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4918      	ldr	r1, [pc, #96]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4910      	ldr	r1, [pc, #64]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800327e:	f000 f825 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 8003282:	4601      	mov	r1, r0
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	fa21 f303 	lsr.w	r3, r1, r3
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe f8ac 	bl	8001400 <HAL_InitTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ac:	7afb      	ldrb	r3, [r7, #11]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40022000 	.word	0x40022000
 80032bc:	40021000 	.word	0x40021000
 80032c0:	080058bc 	.word	0x080058bc
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000004 	.word	0x20000004

080032cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x34>
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	d121      	bne.n	800333e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d11e      	bne.n	800333e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e005      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10d      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d102      	bne.n	800334a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e004      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d101      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003352:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d133      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d002      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0xa4>
 800336a:	2b03      	cmp	r3, #3
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0xaa>
 800336e:	e005      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003372:	617b      	str	r3, [r7, #20]
      break;
 8003374:	e005      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003378:	617b      	str	r3, [r7, #20]
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	617b      	str	r3, [r7, #20]
      break;
 8003380:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	3301      	adds	r3, #1
 800338e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	fb02 f203 	mul.w	r2, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	0e5b      	lsrs	r3, r3, #25
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	3301      	adds	r3, #1
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c2:	69bb      	ldr	r3, [r7, #24]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080058d4 	.word	0x080058d4
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	007a1200 	.word	0x007a1200

080033e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000000 	.word	0x20000000

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033fc:	f7ff fff0 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003400:	4601      	mov	r1, r0
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	080058cc 	.word	0x080058cc

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003428:	f7ff ffda 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 800342c:	4601      	mov	r1, r0
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0adb      	lsrs	r3, r3, #11
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_RCC_GetPCLK2Freq+0x28>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	080058cc 	.word	0x080058cc

08003450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003468:	f7ff f92c 	bl	80026c4 <HAL_PWREx_GetVoltageRange>
 800346c:	6178      	str	r0, [r7, #20]
 800346e:	e014      	b.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	4a24      	ldr	r2, [pc, #144]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	6593      	str	r3, [r2, #88]	; 0x58
 800347c:	4b22      	ldr	r3, [pc, #136]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003488:	f7ff f91c 	bl	80026c4 <HAL_PWREx_GetVoltageRange>
 800348c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d10b      	bne.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d919      	bls.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2ba0      	cmp	r3, #160	; 0xa0
 80034ac:	d902      	bls.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ae:	2302      	movs	r3, #2
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e013      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b4:	2301      	movs	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e010      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d902      	bls.n	80034c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034c0:	2303      	movs	r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e00a      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d102      	bne.n	80034d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034cc:	2302      	movs	r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	e004      	b.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b70      	cmp	r3, #112	; 0x70
 80034d6:	d101      	bne.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 0207 	bic.w	r2, r3, #7
 80034e4:	4909      	ldr	r1, [pc, #36]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	40022000 	.word	0x40022000

08003510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003518:	2300      	movs	r3, #0
 800351a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800351c:	2300      	movs	r3, #0
 800351e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003534:	d01c      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353a:	d802      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003540:	e01f      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003546:	d003      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003548:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800354c:	d01c      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800354e:	e018      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003550:	4b85      	ldr	r3, [pc, #532]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a84      	ldr	r2, [pc, #528]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355c:	e015      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fac9 	bl	8003afc <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800356e:	e00c      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3320      	adds	r3, #32
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fbb0 	bl	8003cdc <RCCEx_PLLSAI2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	74fb      	strb	r3, [r7, #19]
      break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003590:	4b75      	ldr	r3, [pc, #468]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359e:	4972      	ldr	r1, [pc, #456]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03f      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c0:	d01c      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80035c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c6:	d802      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xda>
 80035cc:	e01f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d2:	d003      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80035d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035d8:	d01c      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80035da:	e018      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035dc:	4b62      	ldr	r3, [pc, #392]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a61      	ldr	r2, [pc, #388]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035e8:	e015      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fa83 	bl	8003afc <RCCEx_PLLSAI1_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3320      	adds	r3, #32
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fb6a 	bl	8003cdc <RCCEx_PLLSAI2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	74fb      	strb	r3, [r7, #19]
      break;
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800361c:	4b52      	ldr	r3, [pc, #328]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362a:	494f      	ldr	r1, [pc, #316]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a0 	beq.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a40      	ldr	r2, [pc, #256]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3a      	ldr	r2, [pc, #232]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003686:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003688:	f7fd ff06 	bl	8001498 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800368e:	e009      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003690:	f7fd ff02 	bl	8001498 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	74fb      	strb	r3, [r7, #19]
        break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036a4:	4b31      	ldr	r3, [pc, #196]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d15c      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01f      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d019      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fd fec1 	bl	8001498 <HAL_GetTick>
 8003716:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003718:	e00b      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fd febd 	bl	8001498 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d902      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	74fb      	strb	r3, [r7, #19]
            break;
 8003730:	e006      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ec      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800375e:	e009      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
 8003764:	e006      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003774:	7c7b      	ldrb	r3, [r7, #17]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377a:	4b9e      	ldr	r3, [pc, #632]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	4a9d      	ldr	r2, [pc, #628]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003792:	4b98      	ldr	r3, [pc, #608]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f023 0203 	bic.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	4994      	ldr	r1, [pc, #592]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b4:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 020c 	bic.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	498c      	ldr	r1, [pc, #560]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4983      	ldr	r1, [pc, #524]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f8:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	497b      	ldr	r1, [pc, #492]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800381a:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003828:	4972      	ldr	r1, [pc, #456]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800383c:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	496a      	ldr	r1, [pc, #424]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	4961      	ldr	r1, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003880:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	4959      	ldr	r1, [pc, #356]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	4950      	ldr	r1, [pc, #320]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	4948      	ldr	r1, [pc, #288]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e6:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	493f      	ldr	r1, [pc, #252]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d028      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003908:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003916:	4937      	ldr	r1, [pc, #220]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003926:	d106      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003932:	60d3      	str	r3, [r2, #12]
 8003934:	e011      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393e:	d10c      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f8d8 	bl	8003afc <RCCEx_PLLSAI1_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d028      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003966:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	491f      	ldr	r1, [pc, #124]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003984:	d106      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003986:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003990:	60d3      	str	r3, [r2, #12]
 8003992:	e011      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8a9 	bl	8003afc <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02b      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e2:	d109      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a02      	ldr	r2, [pc, #8]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ee:	60d3      	str	r3, [r2, #12]
 80039f0:	e014      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f877 	bl	8003afc <RCCEx_PLLSAI1_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02f      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a28:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a36:	4928      	ldr	r1, [pc, #160]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f854 	bl	8003afc <RCCEx_PLLSAI1_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d014      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	74bb      	strb	r3, [r7, #18]
 8003a62:	e011      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f931 	bl	8003cdc <RCCEx_PLLSAI2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa2:	490d      	ldr	r1, [pc, #52]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac6:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ace:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000

08003adc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b0a:	4b73      	ldr	r3, [pc, #460]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b16:	4b70      	ldr	r3, [pc, #448]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d10d      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
       ||
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d044      	beq.n	8003bcc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e041      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d00c      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x6e>
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d013      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x80>
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d120      	bne.n	8003b9a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b58:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11d      	bne.n	8003ba0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b68:	e01a      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7a:	e013      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b7c:	4b56      	ldr	r3, [pc, #344]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10f      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b98:	e006      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9e:	e004      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ba8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bb0:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6819      	ldr	r1, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	4944      	ldr	r1, [pc, #272]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d17d      	bne.n	8003cce <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a40      	ldr	r2, [pc, #256]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fd fc5b 	bl	8001498 <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003be4:	e009      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be6:	f7fd fc57 	bl	8001498 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d902      	bls.n	8003bfa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	73fb      	strb	r3, [r7, #15]
        break;
 8003bf8:	e005      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ef      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d160      	bne.n	8003cce <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d111      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	0211      	lsls	r1, r2, #8
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68d2      	ldr	r2, [r2, #12]
 8003c28:	0912      	lsrs	r2, r2, #4
 8003c2a:	0452      	lsls	r2, r2, #17
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	492a      	ldr	r1, [pc, #168]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	610b      	str	r3, [r1, #16]
 8003c34:	e027      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d112      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c3c:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6892      	ldr	r2, [r2, #8]
 8003c4c:	0211      	lsls	r1, r2, #8
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6912      	ldr	r2, [r2, #16]
 8003c52:	0852      	lsrs	r2, r2, #1
 8003c54:	3a01      	subs	r2, #1
 8003c56:	0552      	lsls	r2, r2, #21
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	491f      	ldr	r1, [pc, #124]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	610b      	str	r3, [r1, #16]
 8003c60:	e011      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	0211      	lsls	r1, r2, #8
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6952      	ldr	r2, [r2, #20]
 8003c78:	0852      	lsrs	r2, r2, #1
 8003c7a:	3a01      	subs	r2, #1
 8003c7c:	0652      	lsls	r2, r2, #25
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	4915      	ldr	r1, [pc, #84]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fd fc01 	bl	8001498 <HAL_GetTick>
 8003c96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c98:	e009      	b.n	8003cae <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c9a:	f7fd fbfd 	bl	8001498 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d902      	bls.n	8003cae <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	73fb      	strb	r3, [r7, #15]
          break;
 8003cac:	e005      	b.n	8003cba <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ef      	beq.n	8003c9a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000

08003cdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cea:	4b68      	ldr	r3, [pc, #416]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0203 	and.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d10d      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
       ||
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d0e:	4b5f      	ldr	r3, [pc, #380]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d044      	beq.n	8003dac <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	e041      	b.n	8003dac <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d00c      	beq.n	8003d4a <RCCEx_PLLSAI2_Config+0x6e>
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d013      	beq.n	8003d5c <RCCEx_PLLSAI2_Config+0x80>
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d120      	bne.n	8003d7a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d38:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d11d      	bne.n	8003d80 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d48:	e01a      	b.n	8003d80 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d4a:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d116      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5a:	e013      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d68:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d78:	e006      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7e:	e004      	b.n	8003d8a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d88:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10d      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d90:	4b3e      	ldr	r3, [pc, #248]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	430b      	orrs	r3, r1
 8003da6:	4939      	ldr	r1, [pc, #228]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d167      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fd fb6b 	bl	8001498 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dc4:	e009      	b.n	8003dda <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dc6:	f7fd fb67 	bl	8001498 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d902      	bls.n	8003dda <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8003dd8:	e005      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dda:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ef      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d14a      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d111      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	0211      	lsls	r1, r2, #8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68d2      	ldr	r2, [r2, #12]
 8003e08:	0912      	lsrs	r2, r2, #4
 8003e0a:	0452      	lsls	r2, r2, #17
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	491f      	ldr	r1, [pc, #124]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	614b      	str	r3, [r1, #20]
 8003e14:	e011      	b.n	8003e3a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	0211      	lsls	r1, r2, #8
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6912      	ldr	r2, [r2, #16]
 8003e2c:	0852      	lsrs	r2, r2, #1
 8003e2e:	3a01      	subs	r2, #1
 8003e30:	0652      	lsls	r2, r2, #25
 8003e32:	430a      	orrs	r2, r1
 8003e34:	4915      	ldr	r1, [pc, #84]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fd fb27 	bl	8001498 <HAL_GetTick>
 8003e4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e4c:	e009      	b.n	8003e62 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e4e:	f7fd fb23 	bl	8001498 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d902      	bls.n	8003e62 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e60:	e005      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0ef      	beq.n	8003e4e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	4903      	ldr	r1, [pc, #12]	; (8003e8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000

08003e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07c      	b.n	8003f9c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fd f87d 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ee2:	d902      	bls.n	8003eea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e002      	b.n	8003ef0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ef8:	d007      	beq.n	8003f0a <HAL_SPI_Init+0x7a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f1a:	d903      	bls.n	8003f24 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
 8003f22:	e002      	b.n	8003f2a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	ea42 0103 	orr.w	r1, r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0204 	and.w	r2, r3, #4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	ea42 0103 	orr.w	r1, r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e040      	b.n	8004038 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd f83c 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	; 0x24
 8003fd0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8c0 	bl	8004168 <UART_SetConfig>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e022      	b.n	8004038 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fc26 	bl	800484c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800400e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800401e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fcad 	bl	8004990 <UART_CheckIdleState>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004054:	2b20      	cmp	r3, #32
 8004056:	f040 8081 	bne.w	800415c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_UART_Transmit+0x26>
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e079      	b.n	800415e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_UART_Transmit+0x38>
 8004074:	2302      	movs	r3, #2
 8004076:	e072      	b.n	800415e <HAL_UART_Transmit+0x11e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800408c:	f7fd fa04 	bl	8001498 <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	88fa      	ldrh	r2, [r7, #6]
 8004096:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d108      	bne.n	80040be <HAL_UART_Transmit+0x7e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e003      	b.n	80040c6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80040ce:	e02d      	b.n	800412c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fc9d 	bl	8004a1a <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e039      	b.n	800415e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fc:	b292      	uxth	r2, r2
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	3302      	adds	r3, #2
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e008      	b.n	800411a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b292      	uxth	r2, r2
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1cb      	bne.n	80040d0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fc69 	bl	8004a1a <UART_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e005      	b.n	800415e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4bb8      	ldr	r3, [pc, #736]	; (8004480 <UART_SetConfig+0x318>)
 800419e:	4013      	ands	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4aae      	ldr	r2, [pc, #696]	; (8004484 <UART_SetConfig+0x31c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	4313      	orrs	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4aa5      	ldr	r2, [pc, #660]	; (8004488 <UART_SetConfig+0x320>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d126      	bne.n	8004246 <UART_SetConfig+0xde>
 80041f8:	4ba4      	ldr	r3, [pc, #656]	; (800448c <UART_SetConfig+0x324>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b03      	cmp	r3, #3
 8004204:	d81a      	bhi.n	800423c <UART_SetConfig+0xd4>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0xa4>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	0800421d 	.word	0x0800421d
 8004210:	0800422d 	.word	0x0800422d
 8004214:	08004225 	.word	0x08004225
 8004218:	08004235 	.word	0x08004235
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e105      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004224:	2302      	movs	r3, #2
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e101      	b.n	8004430 <UART_SetConfig+0x2c8>
 800422c:	2304      	movs	r3, #4
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e0fd      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004234:	2308      	movs	r3, #8
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e0f9      	b.n	8004430 <UART_SetConfig+0x2c8>
 800423c:	2310      	movs	r3, #16
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	bf00      	nop
 8004244:	e0f4      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a91      	ldr	r2, [pc, #580]	; (8004490 <UART_SetConfig+0x328>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d138      	bne.n	80042c2 <UART_SetConfig+0x15a>
 8004250:	4b8e      	ldr	r3, [pc, #568]	; (800448c <UART_SetConfig+0x324>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d82c      	bhi.n	80042b8 <UART_SetConfig+0x150>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0xfc>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004299 	.word	0x08004299
 8004268:	080042b9 	.word	0x080042b9
 800426c:	080042b9 	.word	0x080042b9
 8004270:	080042b9 	.word	0x080042b9
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042b9 	.word	0x080042b9
 8004280:	080042b9 	.word	0x080042b9
 8004284:	080042a1 	.word	0x080042a1
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042b1 	.word	0x080042b1
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e0c7      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e0c3      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e0bf      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e0bb      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	bf00      	nop
 80042c0:	e0b6      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a73      	ldr	r2, [pc, #460]	; (8004494 <UART_SetConfig+0x32c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d125      	bne.n	8004318 <UART_SetConfig+0x1b0>
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <UART_SetConfig+0x324>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d011      	beq.n	80042fe <UART_SetConfig+0x196>
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d802      	bhi.n	80042e4 <UART_SetConfig+0x17c>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <UART_SetConfig+0x186>
 80042e2:	e014      	b.n	800430e <UART_SetConfig+0x1a6>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d006      	beq.n	80042f6 <UART_SetConfig+0x18e>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d00c      	beq.n	8004306 <UART_SetConfig+0x19e>
 80042ec:	e00f      	b.n	800430e <UART_SetConfig+0x1a6>
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f4:	e09c      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042f6:	2302      	movs	r3, #2
 80042f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fc:	e098      	b.n	8004430 <UART_SetConfig+0x2c8>
 80042fe:	2304      	movs	r3, #4
 8004300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004304:	e094      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004306:	2308      	movs	r3, #8
 8004308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430c:	e090      	b.n	8004430 <UART_SetConfig+0x2c8>
 800430e:	2310      	movs	r3, #16
 8004310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004314:	bf00      	nop
 8004316:	e08b      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5e      	ldr	r2, [pc, #376]	; (8004498 <UART_SetConfig+0x330>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d125      	bne.n	800436e <UART_SetConfig+0x206>
 8004322:	4b5a      	ldr	r3, [pc, #360]	; (800448c <UART_SetConfig+0x324>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d011      	beq.n	8004354 <UART_SetConfig+0x1ec>
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d802      	bhi.n	800433a <UART_SetConfig+0x1d2>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <UART_SetConfig+0x1dc>
 8004338:	e014      	b.n	8004364 <UART_SetConfig+0x1fc>
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d006      	beq.n	800434c <UART_SetConfig+0x1e4>
 800433e:	2bc0      	cmp	r3, #192	; 0xc0
 8004340:	d00c      	beq.n	800435c <UART_SetConfig+0x1f4>
 8004342:	e00f      	b.n	8004364 <UART_SetConfig+0x1fc>
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e071      	b.n	8004430 <UART_SetConfig+0x2c8>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e06d      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e069      	b.n	8004430 <UART_SetConfig+0x2c8>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e065      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	bf00      	nop
 800436c:	e060      	b.n	8004430 <UART_SetConfig+0x2c8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a4a      	ldr	r2, [pc, #296]	; (800449c <UART_SetConfig+0x334>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d129      	bne.n	80043cc <UART_SetConfig+0x264>
 8004378:	4b44      	ldr	r3, [pc, #272]	; (800448c <UART_SetConfig+0x324>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	d014      	beq.n	80043b2 <UART_SetConfig+0x24a>
 8004388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438c:	d802      	bhi.n	8004394 <UART_SetConfig+0x22c>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <UART_SetConfig+0x23a>
 8004392:	e016      	b.n	80043c2 <UART_SetConfig+0x25a>
 8004394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004398:	d007      	beq.n	80043aa <UART_SetConfig+0x242>
 800439a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439e:	d00c      	beq.n	80043ba <UART_SetConfig+0x252>
 80043a0:	e00f      	b.n	80043c2 <UART_SetConfig+0x25a>
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a8:	e042      	b.n	8004430 <UART_SetConfig+0x2c8>
 80043aa:	2302      	movs	r3, #2
 80043ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b0:	e03e      	b.n	8004430 <UART_SetConfig+0x2c8>
 80043b2:	2304      	movs	r3, #4
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b8:	e03a      	b.n	8004430 <UART_SetConfig+0x2c8>
 80043ba:	2308      	movs	r3, #8
 80043bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c0:	e036      	b.n	8004430 <UART_SetConfig+0x2c8>
 80043c2:	2310      	movs	r3, #16
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c8:	bf00      	nop
 80043ca:	e031      	b.n	8004430 <UART_SetConfig+0x2c8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <UART_SetConfig+0x31c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d129      	bne.n	800442a <UART_SetConfig+0x2c2>
 80043d6:	4b2d      	ldr	r3, [pc, #180]	; (800448c <UART_SetConfig+0x324>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e4:	d014      	beq.n	8004410 <UART_SetConfig+0x2a8>
 80043e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ea:	d802      	bhi.n	80043f2 <UART_SetConfig+0x28a>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <UART_SetConfig+0x298>
 80043f0:	e016      	b.n	8004420 <UART_SetConfig+0x2b8>
 80043f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f6:	d007      	beq.n	8004408 <UART_SetConfig+0x2a0>
 80043f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043fc:	d00c      	beq.n	8004418 <UART_SetConfig+0x2b0>
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x2b8>
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e013      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e00f      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e00b      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e007      	b.n	8004430 <UART_SetConfig+0x2c8>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	bf00      	nop
 8004428:	e002      	b.n	8004430 <UART_SetConfig+0x2c8>
 800442a:	2310      	movs	r3, #16
 800442c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a13      	ldr	r2, [pc, #76]	; (8004484 <UART_SetConfig+0x31c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f040 80fe 	bne.w	8004638 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004440:	2b08      	cmp	r3, #8
 8004442:	d837      	bhi.n	80044b4 <UART_SetConfig+0x34c>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x2e4>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004471 	.word	0x08004471
 8004450:	080044b5 	.word	0x080044b5
 8004454:	08004479 	.word	0x08004479
 8004458:	080044b5 	.word	0x080044b5
 800445c:	080044a5 	.word	0x080044a5
 8004460:	080044b5 	.word	0x080044b5
 8004464:	080044b5 	.word	0x080044b5
 8004468:	080044b5 	.word	0x080044b5
 800446c:	080044ad 	.word	0x080044ad
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe ffc2 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8004474:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004476:	e020      	b.n	80044ba <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <UART_SetConfig+0x338>)
 800447a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800447c:	e01d      	b.n	80044ba <UART_SetConfig+0x352>
 800447e:	bf00      	nop
 8004480:	efff69f3 	.word	0xefff69f3
 8004484:	40008000 	.word	0x40008000
 8004488:	40013800 	.word	0x40013800
 800448c:	40021000 	.word	0x40021000
 8004490:	40004400 	.word	0x40004400
 8004494:	40004800 	.word	0x40004800
 8004498:	40004c00 	.word	0x40004c00
 800449c:	40005000 	.word	0x40005000
 80044a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80044a4:	f7fe ff12 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 80044a8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044aa:	e006      	b.n	80044ba <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80044ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044b2:	e002      	b.n	80044ba <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	76fb      	strb	r3, [r7, #27]
        break;
 80044b8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 81b9 	beq.w	8004834 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d305      	bcc.n	80044de <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d902      	bls.n	80044e4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	76fb      	strb	r3, [r7, #27]
 80044e2:	e1a7      	b.n	8004834 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	f200 8092 	bhi.w	8004612 <UART_SetConfig+0x4aa>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x38c>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004613 	.word	0x08004613
 80044fc:	08004567 	.word	0x08004567
 8004500:	08004613 	.word	0x08004613
 8004504:	0800459b 	.word	0x0800459b
 8004508:	08004613 	.word	0x08004613
 800450c:	08004613 	.word	0x08004613
 8004510:	08004613 	.word	0x08004613
 8004514:	080045e9 	.word	0x080045e9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe ff6e 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 800451c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4619      	mov	r1, r3
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	f04f 0400 	mov.w	r4, #0
 800452e:	0214      	lsls	r4, r2, #8
 8004530:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004534:	020b      	lsls	r3, r1, #8
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6852      	ldr	r2, [r2, #4]
 800453a:	0852      	lsrs	r2, r2, #1
 800453c:	4611      	mov	r1, r2
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	eb13 0b01 	adds.w	fp, r3, r1
 8004546:	eb44 0c02 	adc.w	ip, r4, r2
 800454a:	4658      	mov	r0, fp
 800454c:	4661      	mov	r1, ip
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f04f 0400 	mov.w	r4, #0
 8004556:	461a      	mov	r2, r3
 8004558:	4623      	mov	r3, r4
 800455a:	f7fb fe91 	bl	8000280 <__aeabi_uldivmod>
 800455e:	4603      	mov	r3, r0
 8004560:	460c      	mov	r4, r1
 8004562:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004564:	e058      	b.n	8004618 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	f04f 0400 	mov.w	r4, #0
 8004570:	49ae      	ldr	r1, [pc, #696]	; (800482c <UART_SetConfig+0x6c4>)
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	eb13 0b01 	adds.w	fp, r3, r1
 800457a:	eb44 0c02 	adc.w	ip, r4, r2
 800457e:	4658      	mov	r0, fp
 8004580:	4661      	mov	r1, ip
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	461a      	mov	r2, r3
 800458c:	4623      	mov	r3, r4
 800458e:	f7fb fe77 	bl	8000280 <__aeabi_uldivmod>
 8004592:	4603      	mov	r3, r0
 8004594:	460c      	mov	r4, r1
 8004596:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004598:	e03e      	b.n	8004618 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fe97 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800459e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	0214      	lsls	r4, r2, #8
 80045b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045b6:	020b      	lsls	r3, r1, #8
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6852      	ldr	r2, [r2, #4]
 80045bc:	0852      	lsrs	r2, r2, #1
 80045be:	4611      	mov	r1, r2
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	eb13 0b01 	adds.w	fp, r3, r1
 80045c8:	eb44 0c02 	adc.w	ip, r4, r2
 80045cc:	4658      	mov	r0, fp
 80045ce:	4661      	mov	r1, ip
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	f7fb fe50 	bl	8000280 <__aeabi_uldivmod>
 80045e0:	4603      	mov	r3, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045e6:	e017      	b.n	8004618 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	f04f 0400 	mov.w	r4, #0
 80045f2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80045f6:	f144 0100 	adc.w	r1, r4, #0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	461a      	mov	r2, r3
 8004604:	4623      	mov	r3, r4
 8004606:	f7fb fe3b 	bl	8000280 <__aeabi_uldivmod>
 800460a:	4603      	mov	r3, r0
 800460c:	460c      	mov	r4, r1
 800460e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004610:	e002      	b.n	8004618 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	76fb      	strb	r3, [r7, #27]
            break;
 8004616:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461e:	d308      	bcc.n	8004632 <UART_SetConfig+0x4ca>
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004626:	d204      	bcs.n	8004632 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	e100      	b.n	8004834 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e0fd      	b.n	8004834 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004640:	f040 8084 	bne.w	800474c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004648:	2b08      	cmp	r3, #8
 800464a:	d85f      	bhi.n	800470c <UART_SetConfig+0x5a4>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <UART_SetConfig+0x4ec>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004679 	.word	0x08004679
 8004658:	08004699 	.word	0x08004699
 800465c:	080046b9 	.word	0x080046b9
 8004660:	0800470d 	.word	0x0800470d
 8004664:	080046d5 	.word	0x080046d5
 8004668:	0800470d 	.word	0x0800470d
 800466c:	0800470d 	.word	0x0800470d
 8004670:	0800470d 	.word	0x0800470d
 8004674:	080046f5 	.word	0x080046f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe febe 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 800467c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	005a      	lsls	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	b29b      	uxth	r3, r3
 8004694:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004696:	e03c      	b.n	8004712 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fe fec4 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 800469c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046b6:	e02c      	b.n	8004712 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80046c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6852      	ldr	r2, [r2, #4]
 80046ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046d2:	e01e      	b.n	8004712 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d4:	f7fe fdfa 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 80046d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	005a      	lsls	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	441a      	add	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046f2:	e00e      	b.n	8004712 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	b29b      	uxth	r3, r3
 8004708:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800470a:	e002      	b.n	8004712 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	76fb      	strb	r3, [r7, #27]
        break;
 8004710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b0f      	cmp	r3, #15
 8004716:	d916      	bls.n	8004746 <UART_SetConfig+0x5de>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d212      	bcs.n	8004746 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f023 030f 	bic.w	r3, r3, #15
 8004728:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	b29a      	uxth	r2, r3
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	4313      	orrs	r3, r2
 800473a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	89fa      	ldrh	r2, [r7, #14]
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	e076      	b.n	8004834 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	76fb      	strb	r3, [r7, #27]
 800474a:	e073      	b.n	8004834 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800474c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004750:	2b08      	cmp	r3, #8
 8004752:	d85c      	bhi.n	800480e <UART_SetConfig+0x6a6>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x5f4>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004781 	.word	0x08004781
 8004760:	0800479f 	.word	0x0800479f
 8004764:	080047bd 	.word	0x080047bd
 8004768:	0800480f 	.word	0x0800480f
 800476c:	080047d9 	.word	0x080047d9
 8004770:	0800480f 	.word	0x0800480f
 8004774:	0800480f 	.word	0x0800480f
 8004778:	0800480f 	.word	0x0800480f
 800477c:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7fe fe3a 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8004784:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085a      	lsrs	r2, r3, #1
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	b29b      	uxth	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800479c:	e03a      	b.n	8004814 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479e:	f7fe fe41 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 80047a2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	085a      	lsrs	r2, r3, #1
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ba:	e02b      	b.n	8004814 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80047c6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6852      	ldr	r2, [r2, #4]
 80047ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047d6:	e01d      	b.n	8004814 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d8:	f7fe fd78 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 80047dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	085a      	lsrs	r2, r3, #1
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	441a      	add	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047f4:	e00e      	b.n	8004814 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	b29b      	uxth	r3, r3
 800480a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800480c:	e002      	b.n	8004814 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	76fb      	strb	r3, [r7, #27]
        break;
 8004812:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d90a      	bls.n	8004830 <UART_SetConfig+0x6c8>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d206      	bcs.n	8004830 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	e003      	b.n	8004834 <UART_SetConfig+0x6cc>
 800482c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004840:	7efb      	ldrb	r3, [r7, #27]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3728      	adds	r7, #40	; 0x28
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800484c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01a      	beq.n	8004962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494a:	d10a      	bne.n	8004962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af02      	add	r7, sp, #8
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800499e:	f7fc fd7b 	bl	8001498 <HAL_GetTick>
 80049a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d10e      	bne.n	80049d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f82a 	bl	8004a1a <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e020      	b.n	8004a12 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d10e      	bne.n	80049fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f814 	bl	8004a1a <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e00a      	b.n	8004a12 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2a:	e05d      	b.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d059      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a34:	f7fc fd30 	bl	8001498 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d302      	bcc.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d11b      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e042      	b.n	8004b08 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02b      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9e:	d123      	bne.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aa8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ab8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e00f      	b.n	8004b08 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d092      	beq.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b10:	b084      	sub	sp, #16
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	f107 001c 	add.w	r0, r7, #28
 8004b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d122      	bne.n	8004b6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa28 	bl	8004fb8 <USB_CoreReset>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]
 8004b6c:	e01a      	b.n	8004ba4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa1c 	bl	8004fb8 <USB_CoreReset>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
 8004b96:	e005      	b.n	8004ba4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr

08004bb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 0201 	bic.w	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
 8004c00:	e00b      	b.n	8004c1a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	e001      	b.n	8004c1a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e003      	b.n	8004c22 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c1a:	2032      	movs	r0, #50	; 0x32
 8004c1c:	f7fc fc48 	bl	80014b0 <HAL_Delay>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e009      	b.n	8004c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3340      	adds	r3, #64	; 0x40
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0e      	cmp	r3, #14
 8004c64:	d9f2      	bls.n	8004c4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11c      	bne.n	8004ca6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c7a:	f043 0302 	orr.w	r3, r3, #2
 8004c7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e005      	b.n	8004cb2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	461a      	mov	r2, r3
 8004cce:	680b      	ldr	r3, [r1, #0]
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cd2:	2103      	movs	r1, #3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f93d 	bl	8004f54 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cda:	2110      	movs	r1, #16
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8f1 	bl	8004ec4 <USB_FlushTxFifo>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f90f 	bl	8004f10 <USB_FlushRxFifo>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	e043      	b.n	8004dae <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3c:	d118      	bne.n	8004d70 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	461a      	mov	r2, r3
 8004d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e013      	b.n	8004d82 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	461a      	mov	r2, r3
 8004d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e008      	b.n	8004d82 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	3301      	adds	r3, #1
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3b7      	bcc.n	8004d26 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e043      	b.n	8004e44 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd2:	d118      	bne.n	8004e06 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e013      	b.n	8004e18 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e008      	b.n	8004e18 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	461a      	mov	r2, r3
 8004e26:	2300      	movs	r3, #0
 8004e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	461a      	mov	r2, r3
 8004e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	3301      	adds	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3b7      	bcc.n	8004dbc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f043 0210 	orr.w	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <USB_DevInit+0x294>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f043 0208 	orr.w	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d107      	bne.n	8004eae <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eba:	b004      	add	sp, #16
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	803c3800 	.word	0x803c3800

08004ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	019b      	lsls	r3, r3, #6
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <USB_FlushTxFifo+0x48>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d0f0      	beq.n	8004ede <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	00030d40 	.word	0x00030d40

08004f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3301      	adds	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <USB_FlushRxFifo+0x40>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e006      	b.n	8004f42 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d0f0      	beq.n	8004f22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	00030d40 	.word	0x00030d40

08004f54 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f74:	4313      	orrs	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004fa6:	2003      	movs	r0, #3
 8004fa8:	f7fc fa82 	bl	80014b0 <HAL_Delay>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	; (800501c <USB_CoreReset+0x64>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e01b      	b.n	800500e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	daf2      	bge.n	8004fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <USB_CoreReset+0x64>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d0f0      	beq.n	8004fee <USB_CoreReset+0x36>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	00030d40 	.word	0x00030d40

08005020 <__errno>:
 8005020:	4b01      	ldr	r3, [pc, #4]	; (8005028 <__errno+0x8>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	2000000c 	.word	0x2000000c

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0d      	ldr	r6, [pc, #52]	; (8005064 <__libc_init_array+0x38>)
 8005030:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <__libc_init_array+0x3c>)
 8005032:	1ba4      	subs	r4, r4, r6
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	2500      	movs	r5, #0
 8005038:	42a5      	cmp	r5, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	4e0b      	ldr	r6, [pc, #44]	; (800506c <__libc_init_array+0x40>)
 800503e:	4c0c      	ldr	r4, [pc, #48]	; (8005070 <__libc_init_array+0x44>)
 8005040:	f000 fc26 	bl	8005890 <_init>
 8005044:	1ba4      	subs	r4, r4, r6
 8005046:	10a4      	asrs	r4, r4, #2
 8005048:	2500      	movs	r5, #0
 800504a:	42a5      	cmp	r5, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005054:	4798      	blx	r3
 8005056:	3501      	adds	r5, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800505e:	4798      	blx	r3
 8005060:	3501      	adds	r5, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	08005940 	.word	0x08005940
 8005068:	08005940 	.word	0x08005940
 800506c:	08005940 	.word	0x08005940
 8005070:	08005944 	.word	0x08005944

08005074 <memset>:
 8005074:	4402      	add	r2, r0
 8005076:	4603      	mov	r3, r0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <memset+0xa>
 800507c:	4770      	bx	lr
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <memset+0x4>

08005084 <siprintf>:
 8005084:	b40e      	push	{r1, r2, r3}
 8005086:	b500      	push	{lr}
 8005088:	b09c      	sub	sp, #112	; 0x70
 800508a:	ab1d      	add	r3, sp, #116	; 0x74
 800508c:	9002      	str	r0, [sp, #8]
 800508e:	9006      	str	r0, [sp, #24]
 8005090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005094:	4809      	ldr	r0, [pc, #36]	; (80050bc <siprintf+0x38>)
 8005096:	9107      	str	r1, [sp, #28]
 8005098:	9104      	str	r1, [sp, #16]
 800509a:	4909      	ldr	r1, [pc, #36]	; (80050c0 <siprintf+0x3c>)
 800509c:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a0:	9105      	str	r1, [sp, #20]
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	a902      	add	r1, sp, #8
 80050a8:	f000 f866 	bl	8005178 <_svfiprintf_r>
 80050ac:	9b02      	ldr	r3, [sp, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	b01c      	add	sp, #112	; 0x70
 80050b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b8:	b003      	add	sp, #12
 80050ba:	4770      	bx	lr
 80050bc:	2000000c 	.word	0x2000000c
 80050c0:	ffff0208 	.word	0xffff0208

080050c4 <__ssputs_r>:
 80050c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	688e      	ldr	r6, [r1, #8]
 80050ca:	429e      	cmp	r6, r3
 80050cc:	4682      	mov	sl, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	4690      	mov	r8, r2
 80050d2:	4699      	mov	r9, r3
 80050d4:	d837      	bhi.n	8005146 <__ssputs_r+0x82>
 80050d6:	898a      	ldrh	r2, [r1, #12]
 80050d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050dc:	d031      	beq.n	8005142 <__ssputs_r+0x7e>
 80050de:	6825      	ldr	r5, [r4, #0]
 80050e0:	6909      	ldr	r1, [r1, #16]
 80050e2:	1a6f      	subs	r7, r5, r1
 80050e4:	6965      	ldr	r5, [r4, #20]
 80050e6:	2302      	movs	r3, #2
 80050e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80050f0:	f109 0301 	add.w	r3, r9, #1
 80050f4:	443b      	add	r3, r7
 80050f6:	429d      	cmp	r5, r3
 80050f8:	bf38      	it	cc
 80050fa:	461d      	movcc	r5, r3
 80050fc:	0553      	lsls	r3, r2, #21
 80050fe:	d530      	bpl.n	8005162 <__ssputs_r+0x9e>
 8005100:	4629      	mov	r1, r5
 8005102:	f000 fb2b 	bl	800575c <_malloc_r>
 8005106:	4606      	mov	r6, r0
 8005108:	b950      	cbnz	r0, 8005120 <__ssputs_r+0x5c>
 800510a:	230c      	movs	r3, #12
 800510c:	f8ca 3000 	str.w	r3, [sl]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	463a      	mov	r2, r7
 8005122:	6921      	ldr	r1, [r4, #16]
 8005124:	f000 faa8 	bl	8005678 <memcpy>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	6126      	str	r6, [r4, #16]
 8005136:	6165      	str	r5, [r4, #20]
 8005138:	443e      	add	r6, r7
 800513a:	1bed      	subs	r5, r5, r7
 800513c:	6026      	str	r6, [r4, #0]
 800513e:	60a5      	str	r5, [r4, #8]
 8005140:	464e      	mov	r6, r9
 8005142:	454e      	cmp	r6, r9
 8005144:	d900      	bls.n	8005148 <__ssputs_r+0x84>
 8005146:	464e      	mov	r6, r9
 8005148:	4632      	mov	r2, r6
 800514a:	4641      	mov	r1, r8
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	f000 fa9e 	bl	800568e <memmove>
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	1b9b      	subs	r3, r3, r6
 8005156:	60a3      	str	r3, [r4, #8]
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	441e      	add	r6, r3
 800515c:	6026      	str	r6, [r4, #0]
 800515e:	2000      	movs	r0, #0
 8005160:	e7dc      	b.n	800511c <__ssputs_r+0x58>
 8005162:	462a      	mov	r2, r5
 8005164:	f000 fb54 	bl	8005810 <_realloc_r>
 8005168:	4606      	mov	r6, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d1e2      	bne.n	8005134 <__ssputs_r+0x70>
 800516e:	6921      	ldr	r1, [r4, #16]
 8005170:	4650      	mov	r0, sl
 8005172:	f000 faa5 	bl	80056c0 <_free_r>
 8005176:	e7c8      	b.n	800510a <__ssputs_r+0x46>

08005178 <_svfiprintf_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	461d      	mov	r5, r3
 800517e:	898b      	ldrh	r3, [r1, #12]
 8005180:	061f      	lsls	r7, r3, #24
 8005182:	b09d      	sub	sp, #116	; 0x74
 8005184:	4680      	mov	r8, r0
 8005186:	460c      	mov	r4, r1
 8005188:	4616      	mov	r6, r2
 800518a:	d50f      	bpl.n	80051ac <_svfiprintf_r+0x34>
 800518c:	690b      	ldr	r3, [r1, #16]
 800518e:	b96b      	cbnz	r3, 80051ac <_svfiprintf_r+0x34>
 8005190:	2140      	movs	r1, #64	; 0x40
 8005192:	f000 fae3 	bl	800575c <_malloc_r>
 8005196:	6020      	str	r0, [r4, #0]
 8005198:	6120      	str	r0, [r4, #16]
 800519a:	b928      	cbnz	r0, 80051a8 <_svfiprintf_r+0x30>
 800519c:	230c      	movs	r3, #12
 800519e:	f8c8 3000 	str.w	r3, [r8]
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	e0c8      	b.n	800533a <_svfiprintf_r+0x1c2>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	6163      	str	r3, [r4, #20]
 80051ac:	2300      	movs	r3, #0
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	2320      	movs	r3, #32
 80051b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b6:	2330      	movs	r3, #48	; 0x30
 80051b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051bc:	9503      	str	r5, [sp, #12]
 80051be:	f04f 0b01 	mov.w	fp, #1
 80051c2:	4637      	mov	r7, r6
 80051c4:	463d      	mov	r5, r7
 80051c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051ca:	b10b      	cbz	r3, 80051d0 <_svfiprintf_r+0x58>
 80051cc:	2b25      	cmp	r3, #37	; 0x25
 80051ce:	d13e      	bne.n	800524e <_svfiprintf_r+0xd6>
 80051d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80051d4:	d00b      	beq.n	80051ee <_svfiprintf_r+0x76>
 80051d6:	4653      	mov	r3, sl
 80051d8:	4632      	mov	r2, r6
 80051da:	4621      	mov	r1, r4
 80051dc:	4640      	mov	r0, r8
 80051de:	f7ff ff71 	bl	80050c4 <__ssputs_r>
 80051e2:	3001      	adds	r0, #1
 80051e4:	f000 80a4 	beq.w	8005330 <_svfiprintf_r+0x1b8>
 80051e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ea:	4453      	add	r3, sl
 80051ec:	9309      	str	r3, [sp, #36]	; 0x24
 80051ee:	783b      	ldrb	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 809d 	beq.w	8005330 <_svfiprintf_r+0x1b8>
 80051f6:	2300      	movs	r3, #0
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	9307      	str	r3, [sp, #28]
 8005204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005208:	931a      	str	r3, [sp, #104]	; 0x68
 800520a:	462f      	mov	r7, r5
 800520c:	2205      	movs	r2, #5
 800520e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005212:	4850      	ldr	r0, [pc, #320]	; (8005354 <_svfiprintf_r+0x1dc>)
 8005214:	f7fa ffe4 	bl	80001e0 <memchr>
 8005218:	9b04      	ldr	r3, [sp, #16]
 800521a:	b9d0      	cbnz	r0, 8005252 <_svfiprintf_r+0xda>
 800521c:	06d9      	lsls	r1, r3, #27
 800521e:	bf44      	itt	mi
 8005220:	2220      	movmi	r2, #32
 8005222:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005226:	071a      	lsls	r2, r3, #28
 8005228:	bf44      	itt	mi
 800522a:	222b      	movmi	r2, #43	; 0x2b
 800522c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005230:	782a      	ldrb	r2, [r5, #0]
 8005232:	2a2a      	cmp	r2, #42	; 0x2a
 8005234:	d015      	beq.n	8005262 <_svfiprintf_r+0xea>
 8005236:	9a07      	ldr	r2, [sp, #28]
 8005238:	462f      	mov	r7, r5
 800523a:	2000      	movs	r0, #0
 800523c:	250a      	movs	r5, #10
 800523e:	4639      	mov	r1, r7
 8005240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005244:	3b30      	subs	r3, #48	; 0x30
 8005246:	2b09      	cmp	r3, #9
 8005248:	d94d      	bls.n	80052e6 <_svfiprintf_r+0x16e>
 800524a:	b1b8      	cbz	r0, 800527c <_svfiprintf_r+0x104>
 800524c:	e00f      	b.n	800526e <_svfiprintf_r+0xf6>
 800524e:	462f      	mov	r7, r5
 8005250:	e7b8      	b.n	80051c4 <_svfiprintf_r+0x4c>
 8005252:	4a40      	ldr	r2, [pc, #256]	; (8005354 <_svfiprintf_r+0x1dc>)
 8005254:	1a80      	subs	r0, r0, r2
 8005256:	fa0b f000 	lsl.w	r0, fp, r0
 800525a:	4318      	orrs	r0, r3
 800525c:	9004      	str	r0, [sp, #16]
 800525e:	463d      	mov	r5, r7
 8005260:	e7d3      	b.n	800520a <_svfiprintf_r+0x92>
 8005262:	9a03      	ldr	r2, [sp, #12]
 8005264:	1d11      	adds	r1, r2, #4
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	9103      	str	r1, [sp, #12]
 800526a:	2a00      	cmp	r2, #0
 800526c:	db01      	blt.n	8005272 <_svfiprintf_r+0xfa>
 800526e:	9207      	str	r2, [sp, #28]
 8005270:	e004      	b.n	800527c <_svfiprintf_r+0x104>
 8005272:	4252      	negs	r2, r2
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	9207      	str	r2, [sp, #28]
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	783b      	ldrb	r3, [r7, #0]
 800527e:	2b2e      	cmp	r3, #46	; 0x2e
 8005280:	d10c      	bne.n	800529c <_svfiprintf_r+0x124>
 8005282:	787b      	ldrb	r3, [r7, #1]
 8005284:	2b2a      	cmp	r3, #42	; 0x2a
 8005286:	d133      	bne.n	80052f0 <_svfiprintf_r+0x178>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9203      	str	r2, [sp, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	bfb8      	it	lt
 8005294:	f04f 33ff 	movlt.w	r3, #4294967295
 8005298:	3702      	adds	r7, #2
 800529a:	9305      	str	r3, [sp, #20]
 800529c:	4d2e      	ldr	r5, [pc, #184]	; (8005358 <_svfiprintf_r+0x1e0>)
 800529e:	7839      	ldrb	r1, [r7, #0]
 80052a0:	2203      	movs	r2, #3
 80052a2:	4628      	mov	r0, r5
 80052a4:	f7fa ff9c 	bl	80001e0 <memchr>
 80052a8:	b138      	cbz	r0, 80052ba <_svfiprintf_r+0x142>
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	1b40      	subs	r0, r0, r5
 80052ae:	fa03 f000 	lsl.w	r0, r3, r0
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	4303      	orrs	r3, r0
 80052b6:	3701      	adds	r7, #1
 80052b8:	9304      	str	r3, [sp, #16]
 80052ba:	7839      	ldrb	r1, [r7, #0]
 80052bc:	4827      	ldr	r0, [pc, #156]	; (800535c <_svfiprintf_r+0x1e4>)
 80052be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052c2:	2206      	movs	r2, #6
 80052c4:	1c7e      	adds	r6, r7, #1
 80052c6:	f7fa ff8b 	bl	80001e0 <memchr>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d038      	beq.n	8005340 <_svfiprintf_r+0x1c8>
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <_svfiprintf_r+0x1e8>)
 80052d0:	bb13      	cbnz	r3, 8005318 <_svfiprintf_r+0x1a0>
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	3307      	adds	r3, #7
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	3308      	adds	r3, #8
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e0:	444b      	add	r3, r9
 80052e2:	9309      	str	r3, [sp, #36]	; 0x24
 80052e4:	e76d      	b.n	80051c2 <_svfiprintf_r+0x4a>
 80052e6:	fb05 3202 	mla	r2, r5, r2, r3
 80052ea:	2001      	movs	r0, #1
 80052ec:	460f      	mov	r7, r1
 80052ee:	e7a6      	b.n	800523e <_svfiprintf_r+0xc6>
 80052f0:	2300      	movs	r3, #0
 80052f2:	3701      	adds	r7, #1
 80052f4:	9305      	str	r3, [sp, #20]
 80052f6:	4619      	mov	r1, r3
 80052f8:	250a      	movs	r5, #10
 80052fa:	4638      	mov	r0, r7
 80052fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005300:	3a30      	subs	r2, #48	; 0x30
 8005302:	2a09      	cmp	r2, #9
 8005304:	d903      	bls.n	800530e <_svfiprintf_r+0x196>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c8      	beq.n	800529c <_svfiprintf_r+0x124>
 800530a:	9105      	str	r1, [sp, #20]
 800530c:	e7c6      	b.n	800529c <_svfiprintf_r+0x124>
 800530e:	fb05 2101 	mla	r1, r5, r1, r2
 8005312:	2301      	movs	r3, #1
 8005314:	4607      	mov	r7, r0
 8005316:	e7f0      	b.n	80052fa <_svfiprintf_r+0x182>
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4622      	mov	r2, r4
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <_svfiprintf_r+0x1ec>)
 8005320:	a904      	add	r1, sp, #16
 8005322:	4640      	mov	r0, r8
 8005324:	f3af 8000 	nop.w
 8005328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800532c:	4681      	mov	r9, r0
 800532e:	d1d6      	bne.n	80052de <_svfiprintf_r+0x166>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	065b      	lsls	r3, r3, #25
 8005334:	f53f af35 	bmi.w	80051a2 <_svfiprintf_r+0x2a>
 8005338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800533a:	b01d      	add	sp, #116	; 0x74
 800533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005340:	ab03      	add	r3, sp, #12
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4622      	mov	r2, r4
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <_svfiprintf_r+0x1ec>)
 8005348:	a904      	add	r1, sp, #16
 800534a:	4640      	mov	r0, r8
 800534c:	f000 f882 	bl	8005454 <_printf_i>
 8005350:	e7ea      	b.n	8005328 <_svfiprintf_r+0x1b0>
 8005352:	bf00      	nop
 8005354:	08005904 	.word	0x08005904
 8005358:	0800590a 	.word	0x0800590a
 800535c:	0800590e 	.word	0x0800590e
 8005360:	00000000 	.word	0x00000000
 8005364:	080050c5 	.word	0x080050c5

08005368 <_printf_common>:
 8005368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	4691      	mov	r9, r2
 800536e:	461f      	mov	r7, r3
 8005370:	688a      	ldr	r2, [r1, #8]
 8005372:	690b      	ldr	r3, [r1, #16]
 8005374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005378:	4293      	cmp	r3, r2
 800537a:	bfb8      	it	lt
 800537c:	4613      	movlt	r3, r2
 800537e:	f8c9 3000 	str.w	r3, [r9]
 8005382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005386:	4606      	mov	r6, r0
 8005388:	460c      	mov	r4, r1
 800538a:	b112      	cbz	r2, 8005392 <_printf_common+0x2a>
 800538c:	3301      	adds	r3, #1
 800538e:	f8c9 3000 	str.w	r3, [r9]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	f8d9 3000 	ldrmi.w	r3, [r9]
 800539c:	3302      	addmi	r3, #2
 800539e:	f8c9 3000 	strmi.w	r3, [r9]
 80053a2:	6825      	ldr	r5, [r4, #0]
 80053a4:	f015 0506 	ands.w	r5, r5, #6
 80053a8:	d107      	bne.n	80053ba <_printf_common+0x52>
 80053aa:	f104 0a19 	add.w	sl, r4, #25
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	f8d9 2000 	ldr.w	r2, [r9]
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	42ab      	cmp	r3, r5
 80053b8:	dc28      	bgt.n	800540c <_printf_common+0xa4>
 80053ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	3300      	adds	r3, #0
 80053c2:	bf18      	it	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	0692      	lsls	r2, r2, #26
 80053c8:	d42d      	bmi.n	8005426 <_printf_common+0xbe>
 80053ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ce:	4639      	mov	r1, r7
 80053d0:	4630      	mov	r0, r6
 80053d2:	47c0      	blx	r8
 80053d4:	3001      	adds	r0, #1
 80053d6:	d020      	beq.n	800541a <_printf_common+0xb2>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	68e5      	ldr	r5, [r4, #12]
 80053dc:	f8d9 2000 	ldr.w	r2, [r9]
 80053e0:	f003 0306 	and.w	r3, r3, #6
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	bf08      	it	eq
 80053e8:	1aad      	subeq	r5, r5, r2
 80053ea:	68a3      	ldr	r3, [r4, #8]
 80053ec:	6922      	ldr	r2, [r4, #16]
 80053ee:	bf0c      	ite	eq
 80053f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053f4:	2500      	movne	r5, #0
 80053f6:	4293      	cmp	r3, r2
 80053f8:	bfc4      	itt	gt
 80053fa:	1a9b      	subgt	r3, r3, r2
 80053fc:	18ed      	addgt	r5, r5, r3
 80053fe:	f04f 0900 	mov.w	r9, #0
 8005402:	341a      	adds	r4, #26
 8005404:	454d      	cmp	r5, r9
 8005406:	d11a      	bne.n	800543e <_printf_common+0xd6>
 8005408:	2000      	movs	r0, #0
 800540a:	e008      	b.n	800541e <_printf_common+0xb6>
 800540c:	2301      	movs	r3, #1
 800540e:	4652      	mov	r2, sl
 8005410:	4639      	mov	r1, r7
 8005412:	4630      	mov	r0, r6
 8005414:	47c0      	blx	r8
 8005416:	3001      	adds	r0, #1
 8005418:	d103      	bne.n	8005422 <_printf_common+0xba>
 800541a:	f04f 30ff 	mov.w	r0, #4294967295
 800541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005422:	3501      	adds	r5, #1
 8005424:	e7c3      	b.n	80053ae <_printf_common+0x46>
 8005426:	18e1      	adds	r1, r4, r3
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	2030      	movs	r0, #48	; 0x30
 800542c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005430:	4422      	add	r2, r4
 8005432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005436:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800543a:	3302      	adds	r3, #2
 800543c:	e7c5      	b.n	80053ca <_printf_common+0x62>
 800543e:	2301      	movs	r3, #1
 8005440:	4622      	mov	r2, r4
 8005442:	4639      	mov	r1, r7
 8005444:	4630      	mov	r0, r6
 8005446:	47c0      	blx	r8
 8005448:	3001      	adds	r0, #1
 800544a:	d0e6      	beq.n	800541a <_printf_common+0xb2>
 800544c:	f109 0901 	add.w	r9, r9, #1
 8005450:	e7d8      	b.n	8005404 <_printf_common+0x9c>
	...

08005454 <_printf_i>:
 8005454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800545c:	460c      	mov	r4, r1
 800545e:	7e09      	ldrb	r1, [r1, #24]
 8005460:	b085      	sub	sp, #20
 8005462:	296e      	cmp	r1, #110	; 0x6e
 8005464:	4617      	mov	r7, r2
 8005466:	4606      	mov	r6, r0
 8005468:	4698      	mov	r8, r3
 800546a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800546c:	f000 80b3 	beq.w	80055d6 <_printf_i+0x182>
 8005470:	d822      	bhi.n	80054b8 <_printf_i+0x64>
 8005472:	2963      	cmp	r1, #99	; 0x63
 8005474:	d036      	beq.n	80054e4 <_printf_i+0x90>
 8005476:	d80a      	bhi.n	800548e <_printf_i+0x3a>
 8005478:	2900      	cmp	r1, #0
 800547a:	f000 80b9 	beq.w	80055f0 <_printf_i+0x19c>
 800547e:	2958      	cmp	r1, #88	; 0x58
 8005480:	f000 8083 	beq.w	800558a <_printf_i+0x136>
 8005484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800548c:	e032      	b.n	80054f4 <_printf_i+0xa0>
 800548e:	2964      	cmp	r1, #100	; 0x64
 8005490:	d001      	beq.n	8005496 <_printf_i+0x42>
 8005492:	2969      	cmp	r1, #105	; 0x69
 8005494:	d1f6      	bne.n	8005484 <_printf_i+0x30>
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	0605      	lsls	r5, r0, #24
 800549c:	f103 0104 	add.w	r1, r3, #4
 80054a0:	d52a      	bpl.n	80054f8 <_printf_i+0xa4>
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da03      	bge.n	80054b2 <_printf_i+0x5e>
 80054aa:	222d      	movs	r2, #45	; 0x2d
 80054ac:	425b      	negs	r3, r3
 80054ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054b2:	486f      	ldr	r0, [pc, #444]	; (8005670 <_printf_i+0x21c>)
 80054b4:	220a      	movs	r2, #10
 80054b6:	e039      	b.n	800552c <_printf_i+0xd8>
 80054b8:	2973      	cmp	r1, #115	; 0x73
 80054ba:	f000 809d 	beq.w	80055f8 <_printf_i+0x1a4>
 80054be:	d808      	bhi.n	80054d2 <_printf_i+0x7e>
 80054c0:	296f      	cmp	r1, #111	; 0x6f
 80054c2:	d020      	beq.n	8005506 <_printf_i+0xb2>
 80054c4:	2970      	cmp	r1, #112	; 0x70
 80054c6:	d1dd      	bne.n	8005484 <_printf_i+0x30>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	f043 0320 	orr.w	r3, r3, #32
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	e003      	b.n	80054da <_printf_i+0x86>
 80054d2:	2975      	cmp	r1, #117	; 0x75
 80054d4:	d017      	beq.n	8005506 <_printf_i+0xb2>
 80054d6:	2978      	cmp	r1, #120	; 0x78
 80054d8:	d1d4      	bne.n	8005484 <_printf_i+0x30>
 80054da:	2378      	movs	r3, #120	; 0x78
 80054dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054e0:	4864      	ldr	r0, [pc, #400]	; (8005674 <_printf_i+0x220>)
 80054e2:	e055      	b.n	8005590 <_printf_i+0x13c>
 80054e4:	6813      	ldr	r3, [r2, #0]
 80054e6:	1d19      	adds	r1, r3, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6011      	str	r1, [r2, #0]
 80054ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f4:	2301      	movs	r3, #1
 80054f6:	e08c      	b.n	8005612 <_printf_i+0x1be>
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6011      	str	r1, [r2, #0]
 80054fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005500:	bf18      	it	ne
 8005502:	b21b      	sxthne	r3, r3
 8005504:	e7cf      	b.n	80054a6 <_printf_i+0x52>
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	6825      	ldr	r5, [r4, #0]
 800550a:	1d18      	adds	r0, r3, #4
 800550c:	6010      	str	r0, [r2, #0]
 800550e:	0628      	lsls	r0, r5, #24
 8005510:	d501      	bpl.n	8005516 <_printf_i+0xc2>
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	e002      	b.n	800551c <_printf_i+0xc8>
 8005516:	0668      	lsls	r0, r5, #25
 8005518:	d5fb      	bpl.n	8005512 <_printf_i+0xbe>
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	4854      	ldr	r0, [pc, #336]	; (8005670 <_printf_i+0x21c>)
 800551e:	296f      	cmp	r1, #111	; 0x6f
 8005520:	bf14      	ite	ne
 8005522:	220a      	movne	r2, #10
 8005524:	2208      	moveq	r2, #8
 8005526:	2100      	movs	r1, #0
 8005528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800552c:	6865      	ldr	r5, [r4, #4]
 800552e:	60a5      	str	r5, [r4, #8]
 8005530:	2d00      	cmp	r5, #0
 8005532:	f2c0 8095 	blt.w	8005660 <_printf_i+0x20c>
 8005536:	6821      	ldr	r1, [r4, #0]
 8005538:	f021 0104 	bic.w	r1, r1, #4
 800553c:	6021      	str	r1, [r4, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d13d      	bne.n	80055be <_printf_i+0x16a>
 8005542:	2d00      	cmp	r5, #0
 8005544:	f040 808e 	bne.w	8005664 <_printf_i+0x210>
 8005548:	4665      	mov	r5, ip
 800554a:	2a08      	cmp	r2, #8
 800554c:	d10b      	bne.n	8005566 <_printf_i+0x112>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	07db      	lsls	r3, r3, #31
 8005552:	d508      	bpl.n	8005566 <_printf_i+0x112>
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	6862      	ldr	r2, [r4, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	bfde      	ittt	le
 800555c:	2330      	movle	r3, #48	; 0x30
 800555e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005562:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005566:	ebac 0305 	sub.w	r3, ip, r5
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	f8cd 8000 	str.w	r8, [sp]
 8005570:	463b      	mov	r3, r7
 8005572:	aa03      	add	r2, sp, #12
 8005574:	4621      	mov	r1, r4
 8005576:	4630      	mov	r0, r6
 8005578:	f7ff fef6 	bl	8005368 <_printf_common>
 800557c:	3001      	adds	r0, #1
 800557e:	d14d      	bne.n	800561c <_printf_i+0x1c8>
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	b005      	add	sp, #20
 8005586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800558a:	4839      	ldr	r0, [pc, #228]	; (8005670 <_printf_i+0x21c>)
 800558c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	1d1d      	adds	r5, r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6015      	str	r5, [r2, #0]
 800559a:	060a      	lsls	r2, r1, #24
 800559c:	d50b      	bpl.n	80055b6 <_printf_i+0x162>
 800559e:	07ca      	lsls	r2, r1, #31
 80055a0:	bf44      	itt	mi
 80055a2:	f041 0120 	orrmi.w	r1, r1, #32
 80055a6:	6021      	strmi	r1, [r4, #0]
 80055a8:	b91b      	cbnz	r3, 80055b2 <_printf_i+0x15e>
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	f022 0220 	bic.w	r2, r2, #32
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	2210      	movs	r2, #16
 80055b4:	e7b7      	b.n	8005526 <_printf_i+0xd2>
 80055b6:	064d      	lsls	r5, r1, #25
 80055b8:	bf48      	it	mi
 80055ba:	b29b      	uxthmi	r3, r3
 80055bc:	e7ef      	b.n	800559e <_printf_i+0x14a>
 80055be:	4665      	mov	r5, ip
 80055c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80055c4:	fb02 3311 	mls	r3, r2, r1, r3
 80055c8:	5cc3      	ldrb	r3, [r0, r3]
 80055ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055ce:	460b      	mov	r3, r1
 80055d0:	2900      	cmp	r1, #0
 80055d2:	d1f5      	bne.n	80055c0 <_printf_i+0x16c>
 80055d4:	e7b9      	b.n	800554a <_printf_i+0xf6>
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	6825      	ldr	r5, [r4, #0]
 80055da:	6961      	ldr	r1, [r4, #20]
 80055dc:	1d18      	adds	r0, r3, #4
 80055de:	6010      	str	r0, [r2, #0]
 80055e0:	0628      	lsls	r0, r5, #24
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	d501      	bpl.n	80055ea <_printf_i+0x196>
 80055e6:	6019      	str	r1, [r3, #0]
 80055e8:	e002      	b.n	80055f0 <_printf_i+0x19c>
 80055ea:	066a      	lsls	r2, r5, #25
 80055ec:	d5fb      	bpl.n	80055e6 <_printf_i+0x192>
 80055ee:	8019      	strh	r1, [r3, #0]
 80055f0:	2300      	movs	r3, #0
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	4665      	mov	r5, ip
 80055f6:	e7b9      	b.n	800556c <_printf_i+0x118>
 80055f8:	6813      	ldr	r3, [r2, #0]
 80055fa:	1d19      	adds	r1, r3, #4
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	681d      	ldr	r5, [r3, #0]
 8005600:	6862      	ldr	r2, [r4, #4]
 8005602:	2100      	movs	r1, #0
 8005604:	4628      	mov	r0, r5
 8005606:	f7fa fdeb 	bl	80001e0 <memchr>
 800560a:	b108      	cbz	r0, 8005610 <_printf_i+0x1bc>
 800560c:	1b40      	subs	r0, r0, r5
 800560e:	6060      	str	r0, [r4, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	2300      	movs	r3, #0
 8005616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800561a:	e7a7      	b.n	800556c <_printf_i+0x118>
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	462a      	mov	r2, r5
 8005620:	4639      	mov	r1, r7
 8005622:	4630      	mov	r0, r6
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d0aa      	beq.n	8005580 <_printf_i+0x12c>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	079b      	lsls	r3, r3, #30
 800562e:	d413      	bmi.n	8005658 <_printf_i+0x204>
 8005630:	68e0      	ldr	r0, [r4, #12]
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	4298      	cmp	r0, r3
 8005636:	bfb8      	it	lt
 8005638:	4618      	movlt	r0, r3
 800563a:	e7a3      	b.n	8005584 <_printf_i+0x130>
 800563c:	2301      	movs	r3, #1
 800563e:	464a      	mov	r2, r9
 8005640:	4639      	mov	r1, r7
 8005642:	4630      	mov	r0, r6
 8005644:	47c0      	blx	r8
 8005646:	3001      	adds	r0, #1
 8005648:	d09a      	beq.n	8005580 <_printf_i+0x12c>
 800564a:	3501      	adds	r5, #1
 800564c:	68e3      	ldr	r3, [r4, #12]
 800564e:	9a03      	ldr	r2, [sp, #12]
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	42ab      	cmp	r3, r5
 8005654:	dcf2      	bgt.n	800563c <_printf_i+0x1e8>
 8005656:	e7eb      	b.n	8005630 <_printf_i+0x1dc>
 8005658:	2500      	movs	r5, #0
 800565a:	f104 0919 	add.w	r9, r4, #25
 800565e:	e7f5      	b.n	800564c <_printf_i+0x1f8>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ac      	bne.n	80055be <_printf_i+0x16a>
 8005664:	7803      	ldrb	r3, [r0, #0]
 8005666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800566a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800566e:	e76c      	b.n	800554a <_printf_i+0xf6>
 8005670:	08005915 	.word	0x08005915
 8005674:	08005926 	.word	0x08005926

08005678 <memcpy>:
 8005678:	b510      	push	{r4, lr}
 800567a:	1e43      	subs	r3, r0, #1
 800567c:	440a      	add	r2, r1
 800567e:	4291      	cmp	r1, r2
 8005680:	d100      	bne.n	8005684 <memcpy+0xc>
 8005682:	bd10      	pop	{r4, pc}
 8005684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568c:	e7f7      	b.n	800567e <memcpy+0x6>

0800568e <memmove>:
 800568e:	4288      	cmp	r0, r1
 8005690:	b510      	push	{r4, lr}
 8005692:	eb01 0302 	add.w	r3, r1, r2
 8005696:	d807      	bhi.n	80056a8 <memmove+0x1a>
 8005698:	1e42      	subs	r2, r0, #1
 800569a:	4299      	cmp	r1, r3
 800569c:	d00a      	beq.n	80056b4 <memmove+0x26>
 800569e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056a6:	e7f8      	b.n	800569a <memmove+0xc>
 80056a8:	4283      	cmp	r3, r0
 80056aa:	d9f5      	bls.n	8005698 <memmove+0xa>
 80056ac:	1881      	adds	r1, r0, r2
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	42d3      	cmn	r3, r2
 80056b2:	d100      	bne.n	80056b6 <memmove+0x28>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80056be:	e7f7      	b.n	80056b0 <memmove+0x22>

080056c0 <_free_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4605      	mov	r5, r0
 80056c4:	2900      	cmp	r1, #0
 80056c6:	d045      	beq.n	8005754 <_free_r+0x94>
 80056c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056cc:	1f0c      	subs	r4, r1, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfb8      	it	lt
 80056d2:	18e4      	addlt	r4, r4, r3
 80056d4:	f000 f8d2 	bl	800587c <__malloc_lock>
 80056d8:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <_free_r+0x98>)
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	4610      	mov	r0, r2
 80056de:	b933      	cbnz	r3, 80056ee <_free_r+0x2e>
 80056e0:	6063      	str	r3, [r4, #4]
 80056e2:	6014      	str	r4, [r2, #0]
 80056e4:	4628      	mov	r0, r5
 80056e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ea:	f000 b8c8 	b.w	800587e <__malloc_unlock>
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	d90c      	bls.n	800570c <_free_r+0x4c>
 80056f2:	6821      	ldr	r1, [r4, #0]
 80056f4:	1862      	adds	r2, r4, r1
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bf04      	itt	eq
 80056fa:	681a      	ldreq	r2, [r3, #0]
 80056fc:	685b      	ldreq	r3, [r3, #4]
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	bf04      	itt	eq
 8005702:	1852      	addeq	r2, r2, r1
 8005704:	6022      	streq	r2, [r4, #0]
 8005706:	6004      	str	r4, [r0, #0]
 8005708:	e7ec      	b.n	80056e4 <_free_r+0x24>
 800570a:	4613      	mov	r3, r2
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	b10a      	cbz	r2, 8005714 <_free_r+0x54>
 8005710:	42a2      	cmp	r2, r4
 8005712:	d9fa      	bls.n	800570a <_free_r+0x4a>
 8005714:	6819      	ldr	r1, [r3, #0]
 8005716:	1858      	adds	r0, r3, r1
 8005718:	42a0      	cmp	r0, r4
 800571a:	d10b      	bne.n	8005734 <_free_r+0x74>
 800571c:	6820      	ldr	r0, [r4, #0]
 800571e:	4401      	add	r1, r0
 8005720:	1858      	adds	r0, r3, r1
 8005722:	4282      	cmp	r2, r0
 8005724:	6019      	str	r1, [r3, #0]
 8005726:	d1dd      	bne.n	80056e4 <_free_r+0x24>
 8005728:	6810      	ldr	r0, [r2, #0]
 800572a:	6852      	ldr	r2, [r2, #4]
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	4401      	add	r1, r0
 8005730:	6019      	str	r1, [r3, #0]
 8005732:	e7d7      	b.n	80056e4 <_free_r+0x24>
 8005734:	d902      	bls.n	800573c <_free_r+0x7c>
 8005736:	230c      	movs	r3, #12
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	e7d3      	b.n	80056e4 <_free_r+0x24>
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	1821      	adds	r1, r4, r0
 8005740:	428a      	cmp	r2, r1
 8005742:	bf04      	itt	eq
 8005744:	6811      	ldreq	r1, [r2, #0]
 8005746:	6852      	ldreq	r2, [r2, #4]
 8005748:	6062      	str	r2, [r4, #4]
 800574a:	bf04      	itt	eq
 800574c:	1809      	addeq	r1, r1, r0
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	605c      	str	r4, [r3, #4]
 8005752:	e7c7      	b.n	80056e4 <_free_r+0x24>
 8005754:	bd38      	pop	{r3, r4, r5, pc}
 8005756:	bf00      	nop
 8005758:	200000b8 	.word	0x200000b8

0800575c <_malloc_r>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	1ccd      	adds	r5, r1, #3
 8005760:	f025 0503 	bic.w	r5, r5, #3
 8005764:	3508      	adds	r5, #8
 8005766:	2d0c      	cmp	r5, #12
 8005768:	bf38      	it	cc
 800576a:	250c      	movcc	r5, #12
 800576c:	2d00      	cmp	r5, #0
 800576e:	4606      	mov	r6, r0
 8005770:	db01      	blt.n	8005776 <_malloc_r+0x1a>
 8005772:	42a9      	cmp	r1, r5
 8005774:	d903      	bls.n	800577e <_malloc_r+0x22>
 8005776:	230c      	movs	r3, #12
 8005778:	6033      	str	r3, [r6, #0]
 800577a:	2000      	movs	r0, #0
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	f000 f87d 	bl	800587c <__malloc_lock>
 8005782:	4a21      	ldr	r2, [pc, #132]	; (8005808 <_malloc_r+0xac>)
 8005784:	6814      	ldr	r4, [r2, #0]
 8005786:	4621      	mov	r1, r4
 8005788:	b991      	cbnz	r1, 80057b0 <_malloc_r+0x54>
 800578a:	4c20      	ldr	r4, [pc, #128]	; (800580c <_malloc_r+0xb0>)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	b91b      	cbnz	r3, 8005798 <_malloc_r+0x3c>
 8005790:	4630      	mov	r0, r6
 8005792:	f000 f863 	bl	800585c <_sbrk_r>
 8005796:	6020      	str	r0, [r4, #0]
 8005798:	4629      	mov	r1, r5
 800579a:	4630      	mov	r0, r6
 800579c:	f000 f85e 	bl	800585c <_sbrk_r>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d124      	bne.n	80057ee <_malloc_r+0x92>
 80057a4:	230c      	movs	r3, #12
 80057a6:	6033      	str	r3, [r6, #0]
 80057a8:	4630      	mov	r0, r6
 80057aa:	f000 f868 	bl	800587e <__malloc_unlock>
 80057ae:	e7e4      	b.n	800577a <_malloc_r+0x1e>
 80057b0:	680b      	ldr	r3, [r1, #0]
 80057b2:	1b5b      	subs	r3, r3, r5
 80057b4:	d418      	bmi.n	80057e8 <_malloc_r+0x8c>
 80057b6:	2b0b      	cmp	r3, #11
 80057b8:	d90f      	bls.n	80057da <_malloc_r+0x7e>
 80057ba:	600b      	str	r3, [r1, #0]
 80057bc:	50cd      	str	r5, [r1, r3]
 80057be:	18cc      	adds	r4, r1, r3
 80057c0:	4630      	mov	r0, r6
 80057c2:	f000 f85c 	bl	800587e <__malloc_unlock>
 80057c6:	f104 000b 	add.w	r0, r4, #11
 80057ca:	1d23      	adds	r3, r4, #4
 80057cc:	f020 0007 	bic.w	r0, r0, #7
 80057d0:	1ac3      	subs	r3, r0, r3
 80057d2:	d0d3      	beq.n	800577c <_malloc_r+0x20>
 80057d4:	425a      	negs	r2, r3
 80057d6:	50e2      	str	r2, [r4, r3]
 80057d8:	e7d0      	b.n	800577c <_malloc_r+0x20>
 80057da:	428c      	cmp	r4, r1
 80057dc:	684b      	ldr	r3, [r1, #4]
 80057de:	bf16      	itet	ne
 80057e0:	6063      	strne	r3, [r4, #4]
 80057e2:	6013      	streq	r3, [r2, #0]
 80057e4:	460c      	movne	r4, r1
 80057e6:	e7eb      	b.n	80057c0 <_malloc_r+0x64>
 80057e8:	460c      	mov	r4, r1
 80057ea:	6849      	ldr	r1, [r1, #4]
 80057ec:	e7cc      	b.n	8005788 <_malloc_r+0x2c>
 80057ee:	1cc4      	adds	r4, r0, #3
 80057f0:	f024 0403 	bic.w	r4, r4, #3
 80057f4:	42a0      	cmp	r0, r4
 80057f6:	d005      	beq.n	8005804 <_malloc_r+0xa8>
 80057f8:	1a21      	subs	r1, r4, r0
 80057fa:	4630      	mov	r0, r6
 80057fc:	f000 f82e 	bl	800585c <_sbrk_r>
 8005800:	3001      	adds	r0, #1
 8005802:	d0cf      	beq.n	80057a4 <_malloc_r+0x48>
 8005804:	6025      	str	r5, [r4, #0]
 8005806:	e7db      	b.n	80057c0 <_malloc_r+0x64>
 8005808:	200000b8 	.word	0x200000b8
 800580c:	200000bc 	.word	0x200000bc

08005810 <_realloc_r>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	4607      	mov	r7, r0
 8005814:	4614      	mov	r4, r2
 8005816:	460e      	mov	r6, r1
 8005818:	b921      	cbnz	r1, 8005824 <_realloc_r+0x14>
 800581a:	4611      	mov	r1, r2
 800581c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005820:	f7ff bf9c 	b.w	800575c <_malloc_r>
 8005824:	b922      	cbnz	r2, 8005830 <_realloc_r+0x20>
 8005826:	f7ff ff4b 	bl	80056c0 <_free_r>
 800582a:	4625      	mov	r5, r4
 800582c:	4628      	mov	r0, r5
 800582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005830:	f000 f826 	bl	8005880 <_malloc_usable_size_r>
 8005834:	42a0      	cmp	r0, r4
 8005836:	d20f      	bcs.n	8005858 <_realloc_r+0x48>
 8005838:	4621      	mov	r1, r4
 800583a:	4638      	mov	r0, r7
 800583c:	f7ff ff8e 	bl	800575c <_malloc_r>
 8005840:	4605      	mov	r5, r0
 8005842:	2800      	cmp	r0, #0
 8005844:	d0f2      	beq.n	800582c <_realloc_r+0x1c>
 8005846:	4631      	mov	r1, r6
 8005848:	4622      	mov	r2, r4
 800584a:	f7ff ff15 	bl	8005678 <memcpy>
 800584e:	4631      	mov	r1, r6
 8005850:	4638      	mov	r0, r7
 8005852:	f7ff ff35 	bl	80056c0 <_free_r>
 8005856:	e7e9      	b.n	800582c <_realloc_r+0x1c>
 8005858:	4635      	mov	r5, r6
 800585a:	e7e7      	b.n	800582c <_realloc_r+0x1c>

0800585c <_sbrk_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4c06      	ldr	r4, [pc, #24]	; (8005878 <_sbrk_r+0x1c>)
 8005860:	2300      	movs	r3, #0
 8005862:	4605      	mov	r5, r0
 8005864:	4608      	mov	r0, r1
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	f7fb fd26 	bl	80012b8 <_sbrk>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_sbrk_r+0x1a>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	b103      	cbz	r3, 8005876 <_sbrk_r+0x1a>
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20000720 	.word	0x20000720

0800587c <__malloc_lock>:
 800587c:	4770      	bx	lr

0800587e <__malloc_unlock>:
 800587e:	4770      	bx	lr

08005880 <_malloc_usable_size_r>:
 8005880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005884:	1f18      	subs	r0, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	bfbc      	itt	lt
 800588a:	580b      	ldrlt	r3, [r1, r0]
 800588c:	18c0      	addlt	r0, r0, r3
 800588e:	4770      	bx	lr

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
