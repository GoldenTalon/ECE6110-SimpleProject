
Simple_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005418  08005418  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005420  08005420  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000070  08005498  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08005498  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f0d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ada  00000000  00000000  00036fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  00039a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003afb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028139  00000000  00000000  0003c390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000100e6  00000000  00000000  000644c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f308a  00000000  00000000  000745af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dbc  00000000  00000000  001676b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005370 	.word	0x08005370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005370 	.word	0x08005370

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fefa 	bl	800137e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f83b 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa45 	bl	8000a1c <MX_GPIO_Init>
    MX_DFSDM1_Init();
 8000592:	f000 f8db 	bl	800074c <MX_DFSDM1_Init>
    MX_I2C2_Init();
 8000596:	f000 f911 	bl	80007bc <MX_I2C2_Init>
    MX_QUADSPI_Init();
 800059a:	f000 f94d 	bl	8000838 <MX_QUADSPI_Init>
    MX_SPI3_Init();
 800059e:	f000 f971 	bl	8000884 <MX_SPI3_Init>
    MX_USART1_UART_Init();
 80005a2:	f000 f9ad 	bl	8000900 <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 80005a6:	f000 f9db 	bl	8000960 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 80005aa:	f000 fa09 	bl	80009c0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
    num1 = 50;
 80005ae:	2332      	movs	r3, #50	; 0x32
 80005b0:	76fb      	strb	r3, [r7, #27]
    val = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


    	val = __QADD16(val,num1);
 80005b6:	69fa      	ldr	r2, [r7, #28]
 80005b8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80005bc:	617a      	str	r2, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]

__STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	fa93 f312 	qadd16	r3, r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	61fb      	str	r3, [r7, #28]

        sprintf((char*)buf,
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	463b      	mov	r3, r7
 80005d2:	490a      	ldr	r1, [pc, #40]	; (80005fc <main+0x7c>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 fac5 	bl	8004b64 <siprintf>
        "QADD Result: %u\r\n",
        ((unsigned int)val));


    // Send out buffer (temperature or error message)
    HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005da:	463b      	mov	r3, r7
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fdf7 	bl	80001d0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	4639      	mov	r1, r7
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x80>)
 80005ee:	f003 fa97 	bl	8003b20 <HAL_UART_Transmit>

    // Wait
    HAL_Delay(50);
 80005f2:	2032      	movs	r0, #50	; 0x32
 80005f4:	f000 ff34 	bl	8001460 <HAL_Delay>
    	val = __QADD16(val,num1);
 80005f8:	e7dd      	b.n	80005b6 <main+0x36>
 80005fa:	bf00      	nop
 80005fc:	08005388 	.word	0x08005388
 8000600:	20000630 	.word	0x20000630

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	; 0xe0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fa9e 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2288      	movs	r2, #136	; 0x88
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fa90 	bl	8004b54 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fda6 	bl	8002184 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000638:	4b42      	ldr	r3, [pc, #264]	; (8000744 <SystemClock_Config+0x140>)
 800063a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063e:	4a41      	ldr	r2, [pc, #260]	; (8000744 <SystemClock_Config+0x140>)
 8000640:	f023 0318 	bic.w	r3, r3, #24
 8000644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000648:	2314      	movs	r3, #20
 800064a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000660:	2360      	movs	r3, #96	; 0x60
 8000662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000678:	2328      	movs	r3, #40	; 0x28
 800067a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067e:	2307      	movs	r3, #7
 8000680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fec1 	bl	800241c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006a0:	f000 fb6c 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006c6:	2104      	movs	r1, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fa8d 	bl	8002be8 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006d4:	f000 fb52 	bl	8000d7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <SystemClock_Config+0x144>)
 80006da:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006f4:	2301      	movs	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006fc:	2318      	movs	r3, #24
 80006fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000700:	2307      	movs	r3, #7
 8000702:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800070c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000710:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fc6b 	bl	8002ff0 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000720:	f000 fb2c 	bl	8000d7c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000724:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000728:	f001 fd4a 	bl	80021c0 <HAL_PWREx_ControlVoltageScaling>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000732:	f000 fb23 	bl	8000d7c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000736:	f002 ff41 	bl	80035bc <HAL_RCCEx_EnableMSIPLLMode>
}
 800073a:	bf00      	nop
 800073c:	37e0      	adds	r7, #224	; 0xe0
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	00012085 	.word	0x00012085

0800074c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <MX_DFSDM1_Init+0x6c>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000764:	2202      	movs	r2, #2
 8000766:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000784:	2204      	movs	r2, #4
 8000786:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000790:	2201      	movs	r2, #1
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 80007a2:	f000 ff91 	bl	80016c8 <HAL_DFSDM_ChannelInit>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007ac:	f000 fae6 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000c0 	.word	0x200000c0
 80007b8:	40016020 	.word	0x40016020

080007bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_I2C2_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_I2C2_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_I2C2_Init+0x74>)
 80007c8:	f640 6214 	movw	r2, #3604	; 0xe14
 80007cc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_I2C2_Init+0x74>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_I2C2_Init+0x74>)
 80007fa:	f001 fa54 	bl	8001ca6 <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 faba 	bl	8000d7c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_I2C2_Init+0x74>)
 800080c:	f001 fada 	bl	8001dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000816:	f000 fab1 	bl	8000d7c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C2_Init+0x74>)
 800081e:	f001 fb1c 	bl	8001e5a <HAL_I2CEx_ConfigDigitalFilter>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000828:	f000 faa8 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000580 	.word	0x20000580
 8000834:	40005800 	.word	0x40005800

08000838 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_QUADSPI_Init+0x44>)
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <MX_QUADSPI_Init+0x48>)
 8000840:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_QUADSPI_Init+0x44>)
 8000844:	22ff      	movs	r2, #255	; 0xff
 8000846:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_QUADSPI_Init+0x44>)
 800084a:	2201      	movs	r2, #1
 800084c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_QUADSPI_Init+0x44>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_QUADSPI_Init+0x44>)
 8000856:	2201      	movs	r2, #1
 8000858:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_QUADSPI_Init+0x44>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_QUADSPI_Init+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_QUADSPI_Init+0x44>)
 8000868:	f001 fd10 	bl	800228c <HAL_QSPI_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000872:	f000 fa83 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200006d4 	.word	0x200006d4
 8000880:	a0001000 	.word	0xa0001000

08000884 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_SPI3_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_SPI3_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_SPI3_Init+0x74>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_SPI3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI3_Init+0x74>)
 800089e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008d2:	2207      	movs	r2, #7
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008de:	2208      	movs	r2, #8
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_SPI3_Init+0x74>)
 80008e4:	f003 f844 	bl	8003970 <HAL_SPI_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fa45 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200005cc 	.word	0x200005cc
 80008fc:	40003c00 	.word	0x40003c00

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000944:	f003 f89e 	bl	8003a84 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 fa15 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000630 	.word	0x20000630
 800095c:	40013800 	.word	0x40013800

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_USART3_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART3_UART_Init+0x58>)
 80009a4:	f003 f86e 	bl	8003a84 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 f9e5 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000f8 	.word	0x200000f8
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2206      	movs	r2, #6
 80009d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2202      	movs	r2, #2
 80009dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	f001 fa75 	bl	8001ef2 <HAL_PCD_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 f9b5 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000178 	.word	0x20000178

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	4bba      	ldr	r3, [pc, #744]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4ab9      	ldr	r2, [pc, #740]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4bb7      	ldr	r3, [pc, #732]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4bb4      	ldr	r3, [pc, #720]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4ab3      	ldr	r2, [pc, #716]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4bb1      	ldr	r3, [pc, #708]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4bae      	ldr	r3, [pc, #696]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4aad      	ldr	r2, [pc, #692]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4bab      	ldr	r3, [pc, #684]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4ba8      	ldr	r3, [pc, #672]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4aa7      	ldr	r2, [pc, #668]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	4ba2      	ldr	r3, [pc, #648]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4aa1      	ldr	r2, [pc, #644]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b9f      	ldr	r3, [pc, #636]	; (8000d1c <MX_GPIO_Init+0x300>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ab0:	489b      	ldr	r0, [pc, #620]	; (8000d20 <MX_GPIO_Init+0x304>)
 8000ab2:	f001 f8bd 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f248 1104 	movw	r1, #33028	; 0x8104
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f001 f8b6 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000aca:	4896      	ldr	r0, [pc, #600]	; (8000d24 <MX_GPIO_Init+0x308>)
 8000acc:	f001 f8b0 	bl	8001c30 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ad6:	4894      	ldr	r0, [pc, #592]	; (8000d28 <MX_GPIO_Init+0x30c>)
 8000ad8:	f001 f8aa 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	4891      	ldr	r0, [pc, #580]	; (8000d28 <MX_GPIO_Init+0x30c>)
 8000ae4:	f001 f8a4 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000aee:	488f      	ldr	r0, [pc, #572]	; (8000d2c <MX_GPIO_Init+0x310>)
 8000af0:	f001 f89e 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2120      	movs	r1, #32
 8000af8:	488a      	ldr	r0, [pc, #552]	; (8000d24 <MX_GPIO_Init+0x308>)
 8000afa:	f001 f899 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	4887      	ldr	r0, [pc, #540]	; (8000d20 <MX_GPIO_Init+0x304>)
 8000b04:	f001 f894 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b08:	f240 1315 	movw	r3, #277	; 0x115
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	487f      	ldr	r0, [pc, #508]	; (8000d20 <MX_GPIO_Init+0x304>)
 8000b22:	f000 fedd 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b26:	236a      	movs	r3, #106	; 0x6a
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2a:	4b81      	ldr	r3, [pc, #516]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4879      	ldr	r0, [pc, #484]	; (8000d20 <MX_GPIO_Init+0x304>)
 8000b3a:	f000 fed1 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b44:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <MX_GPIO_Init+0x318>)
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4876      	ldr	r0, [pc, #472]	; (8000d2c <MX_GPIO_Init+0x310>)
 8000b54:	f000 fec4 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000b58:	233f      	movs	r3, #63	; 0x3f
 8000b5a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4870      	ldr	r0, [pc, #448]	; (8000d2c <MX_GPIO_Init+0x310>)
 8000b6c:	f000 feb8 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b80:	2308      	movs	r3, #8
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 fea7 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b92:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f000 fe97 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f000 fe86 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bd8:	230b      	movs	r3, #11
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fe79 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bee:	23e0      	movs	r3, #224	; 0xe0
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 fe68 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c14:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4840      	ldr	r0, [pc, #256]	; (8000d24 <MX_GPIO_Init+0x308>)
 8000c24:	f000 fe5c 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	483a      	ldr	r0, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x308>)
 8000c3c:	f000 fe50 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000c40:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c44:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4832      	ldr	r0, [pc, #200]	; (8000d24 <MX_GPIO_Init+0x308>)
 8000c5a:	f000 fe41 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000c5e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c62:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	482d      	ldr	r0, [pc, #180]	; (8000d28 <MX_GPIO_Init+0x30c>)
 8000c74:	f000 fe34 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c78:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4825      	ldr	r0, [pc, #148]	; (8000d28 <MX_GPIO_Init+0x30c>)
 8000c92:	f000 fe25 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	481f      	ldr	r0, [pc, #124]	; (8000d2c <MX_GPIO_Init+0x310>)
 8000cb0:	f000 fe16 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_GPIO_Init+0x314>)
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4818      	ldr	r0, [pc, #96]	; (8000d2c <MX_GPIO_Init+0x310>)
 8000cca:	f000 fe09 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480f      	ldr	r0, [pc, #60]	; (8000d28 <MX_GPIO_Init+0x30c>)
 8000cea:	f000 fdf9 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cee:	2378      	movs	r3, #120	; 0x78
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_GPIO_Init+0x30c>)
 8000d0a:	f000 fde9 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d14:	2312      	movs	r3, #18
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e00d      	b.n	8000d38 <MX_GPIO_Init+0x31c>
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48001000 	.word	0x48001000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	10110000 	.word	0x10110000
 8000d34:	10210000 	.word	0x10210000
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_GPIO_Init+0x35c>)
 8000d4a:	f000 fdc9 	bl	80018e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2017      	movs	r0, #23
 8000d54:	f000 fc81 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d58:	2017      	movs	r0, #23
 8000d5a:	f000 fc9a 	bl	8001692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2028      	movs	r0, #40	; 0x28
 8000d64:	f000 fc79 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d68:	2028      	movs	r0, #40	; 0x28
 8000d6a:	f000 fc92 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	48000400 	.word	0x48000400

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d128      	bne.n	8000e46 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df8:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dfe:	6613      	str	r3, [r2, #96]	; 0x60
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e24:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e36:	2306      	movs	r3, #6
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e42:	f000 fd4d 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000008c 	.word	0x2000008c
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48001000 	.word	0x48001000

08000e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_I2C_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d128      	bne.n	8000ed0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_I2C_MspInit+0x80>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <HAL_I2C_MspInit+0x80>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_I2C_MspInit+0x80>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <HAL_I2C_MspInit+0x84>)
 8000eb4:	f000 fd14 	bl	80018e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_I2C_MspInit+0x80>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_I2C_MspInit+0x80>)
 8000ebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_I2C_MspInit+0x80>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40005800 	.word	0x40005800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_QSPI_MspInit+0x7c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d128      	bne.n	8000f58 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_QSPI_MspInit+0x80>)
 8000f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HAL_QSPI_MspInit+0x80>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6513      	str	r3, [r2, #80]	; 0x50
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_QSPI_MspInit+0x80>)
 8000f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_QSPI_MspInit+0x80>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_QSPI_MspInit+0x80>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_QSPI_MspInit+0x80>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8000f36:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f3a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_QSPI_MspInit+0x84>)
 8000f54:	f000 fcc4 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	a0001000 	.word	0xa0001000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48001000 	.word	0x48001000

08000f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_SPI_MspInit+0x7c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d128      	bne.n	8000fe0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_SPI_MspInit+0x80>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_SPI_MspInit+0x84>)
 8000fdc:	f000 fc80 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40003c00 	.word	0x40003c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000800 	.word	0x48000800

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <HAL_UART_MspInit+0xd8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d128      	bne.n	8001068 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	4a2d      	ldr	r2, [pc, #180]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6613      	str	r3, [r2, #96]	; 0x60
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001056:	2307      	movs	r3, #7
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	481c      	ldr	r0, [pc, #112]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001062:	f000 fc3d 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001066:	e02d      	b.n	80010c4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d128      	bne.n	80010c4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010b4:	2307      	movs	r3, #7
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <HAL_UART_MspInit+0xe8>)
 80010c0:	f000 fc0e 	bl	80018e0 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3730      	adds	r7, #48	; 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	40004800 	.word	0x40004800
 80010dc:	48000c00 	.word	0x48000c00

080010e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001100:	d154      	bne.n	80011ac <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800111a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f000 fbd5 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001136:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001148:	230a      	movs	r3, #10
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 fbc3 	bl	80018e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001160:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001196:	f001 f869 	bl	800226c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_PCD_MspInit+0xd4>)
 80011a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011a6:	e001      	b.n	80011ac <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80011a8:	f001 f860 	bl	800226c <HAL_PWREx_EnableVddUSB>
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f90a 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001218:	2020      	movs	r0, #32
 800121a:	f000 fd21 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800121e:	2040      	movs	r0, #64	; 0x40
 8001220:	f000 fd1e 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001224:	2080      	movs	r0, #128	; 0x80
 8001226:	f000 fd1b 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800122a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800122e:	f000 fd17 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}

08001236 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800123a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800123e:	f000 fd0f 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001242:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001246:	f000 fd0b 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800124a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800124e:	f000 fd07 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001252:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001256:	f000 fd03 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800125a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800125e:	f000 fcff 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x50>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x16>
		heap_end = &end;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <_sbrk+0x50>)
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <_sbrk+0x54>)
 800127c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <_sbrk+0x50>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <_sbrk+0x50>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	466a      	mov	r2, sp
 800128e:	4293      	cmp	r3, r2
 8001290:	d907      	bls.n	80012a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001292:	f003 fc35 	bl	8004b00 <__errno>
 8001296:	4602      	mov	r2, r0
 8001298:	230c      	movs	r3, #12
 800129a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e006      	b.n	80012b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <_sbrk+0x50>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <_sbrk+0x50>)
 80012ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000090 	.word	0x20000090
 80012bc:	20000728 	.word	0x20000728

080012c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <SystemInit+0x64>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <SystemInit+0x64>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <SystemInit+0x68>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a13      	ldr	r2, [pc, #76]	; (8001328 <SystemInit+0x68>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <SystemInit+0x68>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <SystemInit+0x68>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <SystemInit+0x68>)
 80012ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <SystemInit+0x68>)
 80012f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <SystemInit+0x68>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <SystemInit+0x68>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <SystemInit+0x68>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SystemInit+0x64>)
 8001312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001316:	609a      	str	r2, [r3, #8]
#endif
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	40021000 	.word	0x40021000

0800132c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001330:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001332:	e003      	b.n	800133c <LoopCopyDataInit>

08001334 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001336:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001338:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800133a:	3104      	adds	r1, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <LoopForever+0xa>)
	ldr	r3, =_edata
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001340:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001342:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001344:	d3f6      	bcc.n	8001334 <CopyDataInit>
	ldr	r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001348:	e002      	b.n	8001350 <LoopFillZerobss>

0800134a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800134a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800134c:	f842 3b04 	str.w	r3, [r2], #4

08001350 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <LoopForever+0x16>)
	cmp	r2, r3
 8001352:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001354:	d3f9      	bcc.n	800134a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff ffb3 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 fbd7 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135e:	f7ff f90f 	bl	8000580 <main>

08001362 <LoopForever>:

LoopForever:
    b LoopForever
 8001362:	e7fe      	b.n	8001362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001364:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001368:	08005428 	.word	0x08005428
	ldr	r0, =_sdata
 800136c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001370:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001374:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001378:	20000724 	.word	0x20000724

0800137c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>

0800137e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f95b 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f80e 	bl	80013b0 <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e001      	b.n	80013a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a0:	f7ff fcf4 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_InitTick+0x68>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_InitTick+0x6c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_InitTick+0x68>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f968 	bl	80016ae <HAL_SYSTICK_Config>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10f      	bne.n	8001404 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	d809      	bhi.n	80013fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ea:	2200      	movs	r2, #0
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	f04f 30ff 	mov.w	r0, #4294967295
 80013f2:	f000 f932 	bl	800165a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_InitTick+0x70>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e007      	b.n	800140e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e004      	b.n	800140e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e001      	b.n	800140e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4413      	add	r3, r2
 8001432:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x1c>)
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	2000071c 	.word	0x2000071c
 8001444:	20000008 	.word	0x20000008

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000071c 	.word	0x2000071c

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d004      	beq.n	8001484 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_Delay+0x40>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001484:	bf00      	nop
 8001486:	f7ff ffdf 	bl	8001448 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	429a      	cmp	r2, r3
 8001494:	d8f7      	bhi.n	8001486 <HAL_Delay+0x26>
  {
  }
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0ac      	b.n	8001834 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f8b2 	bl	8001848 <DFSDM_GetChannelFromInstance>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b55      	ldr	r3, [pc, #340]	; (800183c <HAL_DFSDM_ChannelInit+0x174>)
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e09f      	b.n	8001834 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fb6d 	bl	8000dd4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_DFSDM_ChannelInit+0x178>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_DFSDM_ChannelInit+0x178>)
 8001702:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_DFSDM_ChannelInit+0x178>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d125      	bne.n	8001758 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 8001712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001716:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001718:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4948      	ldr	r1, [pc, #288]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a46      	ldr	r2, [pc, #280]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 800172c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001730:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	3b01      	subs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	493f      	ldr	r1, [pc, #252]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800174c:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3c      	ldr	r2, [pc, #240]	; (8001844 <HAL_DFSDM_ChannelInit+0x17c>)
 8001752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001756:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001766:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001776:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800177c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020f 	bic.w	r2, r2, #15
 8001794:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80017bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	3b01      	subs	r3, #1
 80017ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f002 0207 	and.w	r2, r2, #7
 80017e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001814:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f810 	bl	8001848 <DFSDM_GetChannelFromInstance>
 8001828:	4601      	mov	r1, r0
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_DFSDM_ChannelInit+0x174>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000098 	.word	0x20000098
 8001840:	20000094 	.word	0x20000094
 8001844:	40016000 	.word	0x40016000

08001848 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d102      	bne.n	800185e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e02b      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <DFSDM_GetChannelFromInstance+0x80>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d102      	bne.n	800186c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e024      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <DFSDM_GetChannelFromInstance+0x84>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d102      	bne.n	800187a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e01d      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <DFSDM_GetChannelFromInstance+0x88>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d102      	bne.n	8001888 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001882:	2304      	movs	r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e016      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <DFSDM_GetChannelFromInstance+0x8c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d102      	bne.n	8001896 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001890:	2305      	movs	r3, #5
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e00f      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <DFSDM_GetChannelFromInstance+0x90>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800189e:	2306      	movs	r3, #6
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e008      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <DFSDM_GetChannelFromInstance+0x94>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d102      	bne.n	80018b2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018ac:	2307      	movs	r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e001      	b.n	80018b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018b2:	2303      	movs	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40016000 	.word	0x40016000
 80018c8:	40016020 	.word	0x40016020
 80018cc:	40016040 	.word	0x40016040
 80018d0:	40016080 	.word	0x40016080
 80018d4:	400160a0 	.word	0x400160a0
 80018d8:	400160c0 	.word	0x400160c0
 80018dc:	400160e0 	.word	0x400160e0

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	e17f      	b.n	8001bf0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8171 	beq.w	8001bea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d00b      	beq.n	8001928 <HAL_GPIO_Init+0x48>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800191c:	2b11      	cmp	r3, #17
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b12      	cmp	r3, #18
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d118      	bne.n	80019c8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x128>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b12      	cmp	r3, #18
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	6939      	ldr	r1, [r7, #16]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80ac 	beq.w	8001bea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_GPIO_Init+0x32c>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <HAL_GPIO_Init+0x32c>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_GPIO_Init+0x32c>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aaa:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <HAL_GPIO_Init+0x330>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x242>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <HAL_GPIO_Init+0x334>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x23e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <HAL_GPIO_Init+0x338>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x23a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x33c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x236>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_GPIO_Init+0x340>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x232>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x344>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x22e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x348>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x22a>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e00c      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00a      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e008      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x244>
 8001b22:	2300      	movs	r3, #0
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b34:	4936      	ldr	r1, [pc, #216]	; (8001c10 <HAL_GPIO_Init+0x330>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b66:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_GPIO_Init+0x34c>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f ae78 	bne.w	80018f0 <HAL_GPIO_Init+0x10>
  }
}
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000c00 	.word	0x48000c00
 8001c20:	48001000 	.word	0x48001000
 8001c24:	48001400 	.word	0x48001400
 8001c28:	48001800 	.word	0x48001800
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f806 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e081      	b.n	8001dbc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d106      	bne.n	8001cd2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff f8c5 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2224      	movs	r2, #36	; 0x24
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d107      	bne.n	8001d20 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e006      	b.n	8001d2e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d104      	bne.n	8001d40 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d52:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	ea42 0103 	orr.w	r1, r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69d9      	ldr	r1, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d138      	bne.n	8001e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e032      	b.n	8001e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d139      	bne.n	8001ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e033      	b.n	8001ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2224      	movs	r2, #36	; 0x24
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef4:	b08f      	sub	sp, #60	; 0x3c
 8001ef6:	af0a      	add	r7, sp, #40	; 0x28
 8001ef8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e116      	b.n	8002132 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff f8de 	bl	80010e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 fba6 	bl	8004694 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	687e      	ldr	r6, [r7, #4]
 8001f50:	466d      	mov	r5, sp
 8001f52:	f106 0410 	add.w	r4, r6, #16
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f66:	1d33      	adds	r3, r6, #4
 8001f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f002 fb40 	bl	80045f0 <USB_CoreInit>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0d7      	b.n	8002132 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fb94 	bl	80046b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e04a      	b.n	800202a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	333d      	adds	r3, #61	; 0x3d
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333c      	adds	r3, #60	; 0x3c
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	b298      	uxth	r0, r3
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3342      	adds	r3, #66	; 0x42
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	333f      	adds	r3, #63	; 0x3f
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	; 0x44
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3348      	adds	r3, #72	; 0x48
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3350      	adds	r3, #80	; 0x50
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	3301      	adds	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d3af      	bcc.n	8001f94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e044      	b.n	80020c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3301      	adds	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d3b5      	bcc.n	800203a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	687e      	ldr	r6, [r7, #4]
 80020d6:	466d      	mov	r5, sp
 80020d8:	f106 0410 	add.w	r4, r6, #16
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ec:	1d33      	adds	r3, r6, #4
 80020ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f0:	6838      	ldr	r0, [r7, #0]
 80020f2:	f002 fb0b 	bl	800470c <USB_DevInit>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e014      	b.n	8002132 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f80a 	bl	800213a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f002 fc9b 	bl	8004a66 <USB_DevDisconnect>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	f043 0303 	orr.w	r3, r3, #3
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_PWREx_GetVoltageRange+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40007000 	.word	0x40007000

080021c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ce:	d130      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d038      	beq.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2232      	movs	r2, #50	; 0x32
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002204:	e002      	b.n	800220c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	d102      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x60>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f2      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d110      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e00f      	b.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223e:	d007      	beq.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000
 8002264:	20000000 	.word	0x20000000
 8002268:	431bde83 	.word	0x431bde83

0800226c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227a:	6053      	str	r3, [r2, #4]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000

0800228c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff f8d8 	bl	8001448 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e06f      	b.n	8002384 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_QSPI_Init+0x28>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e067      	b.n	8002384 <HAL_QSPI_Init+0xf8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fe fe07 	bl	8000ee4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f858 	bl	8002390 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	021a      	lsls	r2, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	2120      	movs	r1, #32
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f850 	bl	80023ac <QSPI_WaitFlagStateUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d131      	bne.n	800237a <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002320:	f023 0310 	bic.w	r3, r3, #16
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6852      	ldr	r2, [r2, #4]
 8002328:	0611      	lsls	r1, r2, #24
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68d2      	ldr	r2, [r2, #12]
 800232e:	4311      	orrs	r1, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	430b      	orrs	r3, r1
 8002336:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_QSPI_Init+0x100>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6912      	ldr	r2, [r2, #16]
 8002346:	0411      	lsls	r1, r2, #16
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6952      	ldr	r2, [r2, #20]
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6992      	ldr	r2, [r2, #24]
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002382:	7afb      	ldrb	r3, [r7, #11]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	ffe0f8fe 	.word	0xffe0f8fe

08002390 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023bc:	e01a      	b.n	80023f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d016      	beq.n	80023f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff f83f 	bl	8001448 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2204      	movs	r2, #4
 80023e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00e      	b.n	8002412 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d1d6      	bne.n	80023be <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e3d4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242e:	4ba1      	ldr	r3, [pc, #644]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002438:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80e4 	beq.w	8002618 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_RCC_OscConfig+0x4a>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	f040 808b 	bne.w	8002574 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b01      	cmp	r3, #1
 8002462:	f040 8087 	bne.w	8002574 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002466:	4b93      	ldr	r3, [pc, #588]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x62>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e3ac      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	4b8c      	ldr	r3, [pc, #560]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_RCC_OscConfig+0x7c>
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002496:	e005      	b.n	80024a4 <HAL_RCC_OscConfig+0x88>
 8002498:	4b86      	ldr	r3, [pc, #536]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d223      	bcs.n	80024f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fd3f 	bl	8002f30 <RCC_SetFlashLatencyFromMSIRange>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e38d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024bc:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a7c      	ldr	r2, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b7a      	ldr	r3, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4977      	ldr	r1, [pc, #476]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	4972      	ldr	r1, [pc, #456]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e025      	b.n	800253c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f0:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6f      	ldr	r2, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	496a      	ldr	r1, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250e:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4965      	ldr	r1, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fcff 	bl	8002f30 <RCC_SetFlashLatencyFromMSIRange>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e34d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800253c:	f000 fc36 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002540:	4601      	mov	r1, r0
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <HAL_RCC_OscConfig+0x29c>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa21 f303 	lsr.w	r3, r1, r3
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCC_OscConfig+0x2a0>)
 800255a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800255c:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <HAL_RCC_OscConfig+0x2a4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe ff25 	bl	80013b0 <HAL_InitTick>
 8002566:	4603      	mov	r3, r0
 8002568:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d052      	beq.n	8002616 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	e331      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d032      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002588:	f7fe ff5e 	bl	8001448 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002590:	f7fe ff5a 	bl	8001448 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e31a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a40      	ldr	r2, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	493b      	ldr	r1, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4936      	ldr	r1, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
 80025e0:	e01a      	b.n	8002618 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a33      	ldr	r2, [pc, #204]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ee:	f7fe ff2b 	bl	8001448 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f6:	f7fe ff27 	bl	8001448 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e2e7      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x1da>
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002616:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d074      	beq.n	800270e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b08      	cmp	r3, #8
 8002628:	d005      	beq.n	8002636 <HAL_RCC_OscConfig+0x21a>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d10e      	bne.n	800264e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d10b      	bne.n	800264e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d064      	beq.n	800270c <HAL_RCC_OscConfig+0x2f0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d160      	bne.n	800270c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e2c4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x24a>
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e01d      	b.n	80026a2 <HAL_RCC_OscConfig+0x286>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x26e>
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e00b      	b.n	80026a2 <HAL_RCC_OscConfig+0x286>
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x298>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fecd 	bl	8001448 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b0:	e011      	b.n	80026d6 <HAL_RCC_OscConfig+0x2ba>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	0800539c 	.word	0x0800539c
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fec0 	bl	8001448 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e280      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d6:	4baf      	ldr	r3, [pc, #700]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2a8>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe feb0 	bl	8001448 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe feac 	bl	8001448 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e26c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fe:	4ba5      	ldr	r3, [pc, #660]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x2d0>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d060      	beq.n	80027dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x310>
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d119      	bne.n	800275a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d116      	bne.n	800275a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272c:	4b99      	ldr	r3, [pc, #612]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_OscConfig+0x328>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e249      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b93      	ldr	r3, [pc, #588]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	061b      	lsls	r3, r3, #24
 8002752:	4990      	ldr	r1, [pc, #576]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002758:	e040      	b.n	80027dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d023      	beq.n	80027aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002762:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a8b      	ldr	r2, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fe6b 	bl	8001448 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe fe67 	bl	8001448 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e227      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002788:	4b82      	ldr	r3, [pc, #520]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	497c      	ldr	r1, [pc, #496]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
 80027a8:	e018      	b.n	80027dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b7a      	ldr	r3, [pc, #488]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a79      	ldr	r2, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80027b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fe47 	bl	8001448 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe fe43 	bl	8001448 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e203      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d0:	4b70      	ldr	r3, [pc, #448]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03c      	beq.n	8002862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01c      	beq.n	800282a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f6:	4a67      	ldr	r2, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fe22 	bl	8001448 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe fe1e 	bl	8001448 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1de      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 800281c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <HAL_RCC_OscConfig+0x3ec>
 8002828:	e01b      	b.n	8002862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282a:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 800282c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002830:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe fe05 	bl	8001448 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe fe01 	bl	8001448 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1c1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ef      	bne.n	8002842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80a6 	beq.w	80029bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002870:	2300      	movs	r3, #0
 8002872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002874:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10d      	bne.n	800289c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b44      	ldr	r3, [pc, #272]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	4a43      	ldr	r2, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	6593      	str	r3, [r2, #88]	; 0x58
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002898:	2301      	movs	r3, #1
 800289a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCC_OscConfig+0x57c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d118      	bne.n	80028da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x57c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3a      	ldr	r2, [pc, #232]	; (8002998 <HAL_RCC_OscConfig+0x57c>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b4:	f7fe fdc8 	bl	8001448 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fe fdc4 	bl	8001448 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e184      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <HAL_RCC_OscConfig+0x57c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d108      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4d8>
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f2:	e024      	b.n	800293e <HAL_RCC_OscConfig+0x522>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d110      	bne.n	800291e <HAL_RCC_OscConfig+0x502>
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291c:	e00f      	b.n	800293e <HAL_RCC_OscConfig+0x522>
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fd7f 	bl	8001448 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fd7b 	bl	8001448 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e139      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_OscConfig+0x578>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ed      	beq.n	800294e <HAL_RCC_OscConfig+0x532>
 8002972:	e01a      	b.n	80029aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fd68 	bl	8001448 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297a:	e00f      	b.n	800299c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fd64 	bl	8001448 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d906      	bls.n	800299c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e122      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299c:	4b90      	ldr	r3, [pc, #576]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e8      	bne.n	800297c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b8b      	ldr	r3, [pc, #556]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a8a      	ldr	r2, [pc, #552]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8108 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	f040 80d0 	bne.w	8002b70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029d0:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d130      	bne.n	8002a46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	3b01      	subs	r3, #1
 80029f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d127      	bne.n	8002a46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11f      	bne.n	8002a46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a10:	2a07      	cmp	r2, #7
 8002a12:	bf14      	ite	ne
 8002a14:	2201      	movne	r2, #1
 8002a16:	2200      	moveq	r2, #0
 8002a18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d113      	bne.n	8002a46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d06e      	beq.n	8002b24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b0c      	cmp	r3, #12
 8002a4a:	d069      	beq.n	8002b20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a4c:	4b64      	ldr	r3, [pc, #400]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0b7      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a68:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5c      	ldr	r2, [pc, #368]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a74:	f7fe fce8 	bl	8001448 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fce4 	bl	8001448 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0a4      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_RCC_OscConfig+0x7c8>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002aaa:	3a01      	subs	r2, #1
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ab4:	0212      	lsls	r2, r2, #8
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002abc:	0852      	lsrs	r2, r2, #1
 8002abe:	3a01      	subs	r2, #1
 8002ac0:	0552      	lsls	r2, r2, #21
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ac8:	0852      	lsrs	r2, r2, #1
 8002aca:	3a01      	subs	r2, #1
 8002acc:	0652      	lsls	r2, r2, #25
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad4:	0912      	lsrs	r2, r2, #4
 8002ad6:	0452      	lsls	r2, r2, #17
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	4941      	ldr	r1, [pc, #260]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3e      	ldr	r2, [pc, #248]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aec:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af8:	f7fe fca6 	bl	8001448 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fca2 	bl	8001448 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e062      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1e:	e05a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e059      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b24:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d152      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b3c:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b48:	f7fe fc7e 	bl	8001448 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fc7a 	bl	8001448 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e03a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x734>
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d02d      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b94:	f023 0303 	bic.w	r3, r3, #3
 8002b98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002ba0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fc4d 	bl	8001448 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fc49 	bl	8001448 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e009      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_OscConfig+0x7c4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x796>
 8002bd0:	e001      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	f99d808c 	.word	0xf99d808c

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0c8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0207 	bic.w	r2, r3, #7
 8002c12:	4961      	ldr	r1, [pc, #388]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b5f      	ldr	r3, [pc, #380]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b0      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d04c      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c40:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e09e      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d115      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e092      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c70:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e086      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e07e      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c90:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 0203 	bic.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	493f      	ldr	r1, [pc, #252]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fbd1 	bl	8001448 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7fe fbcd 	bl	8001448 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e066      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 020c 	and.w	r2, r3, #12
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d1eb      	bne.n	8002caa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	492c      	ldr	r1, [pc, #176]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d210      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0207 	bic.w	r2, r3, #7
 8002d06:	4924      	ldr	r1, [pc, #144]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b22      	ldr	r3, [pc, #136]	; (8002d98 <HAL_RCC_ClockConfig+0x1b0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e036      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4918      	ldr	r1, [pc, #96]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4910      	ldr	r1, [pc, #64]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d5e:	f000 f825 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d62:	4601      	mov	r1, r0
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RCC_ClockConfig+0x1b4>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	fa21 f303 	lsr.w	r3, r1, r3
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fb14 	bl	80013b0 <HAL_InitTick>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	0800539c 	.word	0x0800539c
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d121      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d11e      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dfc:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d102      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e004      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8002e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d133      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0xaa>
 8002e4e:	e005      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e005      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	fb02 f203 	mul.w	r2, r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0e5b      	lsrs	r3, r3, #25
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3724      	adds	r7, #36	; 0x24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	080053b4 	.word	0x080053b4
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080053ac 	.word	0x080053ac

08002f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f08:	f7ff ffda 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	0adb      	lsrs	r3, r3, #11
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	080053ac 	.word	0x080053ac

08002f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f48:	f7ff f92c 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002f4c:	6178      	str	r0, [r7, #20]
 8002f4e:	e014      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f68:	f7ff f91c 	bl	80021a4 <HAL_PWREx_GetVoltageRange>
 8002f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f80:	d10b      	bne.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d919      	bls.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f8c:	d902      	bls.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f8e:	2302      	movs	r3, #2
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e013      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f94:	2301      	movs	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	e010      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d902      	bls.n	8002fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	e00a      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d102      	bne.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fac:	2302      	movs	r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e004      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d101      	bne.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb8:	2301      	movs	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 0207 	bic.w	r2, r3, #7
 8002fc4:	4909      	ldr	r1, [pc, #36]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03f      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003014:	d01c      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301a:	d802      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003020:	e01f      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003026:	d003      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003028:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302c:	d01c      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800302e:	e018      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003030:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a84      	ldr	r2, [pc, #528]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303c:	e015      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fac9 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800304e:	e00c      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3320      	adds	r3, #32
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fbb0 	bl	80037bc <RCCEx_PLLSAI2_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003060:	e003      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	74fb      	strb	r3, [r7, #19]
      break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307e:	4972      	ldr	r1, [pc, #456]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003086:	e001      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03f      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a0:	d01c      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80030a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a6:	d802      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80030ac:	e01f      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b2:	d003      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80030b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030b8:	d01c      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80030ba:	e018      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c8:	e015      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa83 	bl	80035dc <RCCEx_PLLSAI1_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030da:	e00c      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3320      	adds	r3, #32
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fb6a 	bl	80037bc <RCCEx_PLLSAI2_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	74fb      	strb	r3, [r7, #19]
      break;
 80030f2:	e000      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310a:	494f      	ldr	r1, [pc, #316]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003112:	e001      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003140:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	4a40      	ldr	r2, [pc, #256]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6593      	str	r3, [r2, #88]	; 0x58
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003158:	2301      	movs	r3, #1
 800315a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003168:	f7fe f96e 	bl	8001448 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800316e:	e009      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe f96a 	bl	8001448 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	74fb      	strb	r3, [r7, #19]
        break;
 8003182:	e005      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d15c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d019      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a20      	ldr	r2, [pc, #128]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe f929 	bl	8001448 <HAL_GetTick>
 80031f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f8:	e00b      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe f925 	bl	8001448 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d902      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	74fb      	strb	r3, [r7, #19]
            break;
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ec      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	4904      	ldr	r1, [pc, #16]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800323e:	e009      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
 8003244:	e006      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7c7b      	ldrb	r3, [r7, #17]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	4a9d      	ldr	r2, [pc, #628]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003272:	4b98      	ldr	r3, [pc, #608]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	4994      	ldr	r1, [pc, #592]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003294:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 020c 	bic.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	498c      	ldr	r1, [pc, #560]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b6:	4b87      	ldr	r3, [pc, #540]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4983      	ldr	r1, [pc, #524]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d8:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	497b      	ldr	r1, [pc, #492]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fa:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	4972      	ldr	r1, [pc, #456]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800331c:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332a:	496a      	ldr	r1, [pc, #424]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333e:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	4961      	ldr	r1, [pc, #388]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	4959      	ldr	r1, [pc, #356]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003382:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003390:	4950      	ldr	r1, [pc, #320]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	4948      	ldr	r1, [pc, #288]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	493f      	ldr	r1, [pc, #252]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d028      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003406:	d106      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e011      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800341e:	d10c      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8d8 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	491f      	ldr	r1, [pc, #124]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003464:	d106      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800346c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003470:	60d3      	str	r3, [r2, #12]
 8003472:	e011      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f8a9 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ce:	60d3      	str	r3, [r2, #12]
 80034d0:	e014      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f877 	bl	80035dc <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003516:	4928      	ldr	r1, [pc, #160]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f854 	bl	80035dc <RCCEx_PLLSAI1_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d014      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	74bb      	strb	r3, [r7, #18]
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f931 	bl	80037bc <RCCEx_PLLSAI2_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000

080035bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000

080035dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ea:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d10d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
       ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800360e:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
       ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d044      	beq.n	80036ac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e041      	b.n	80036ac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d00c      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x6e>
 8003630:	2b03      	cmp	r3, #3
 8003632:	d013      	beq.n	800365c <RCCEx_PLLSAI1_Config+0x80>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d120      	bne.n	800367a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003638:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11d      	bne.n	8003680 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e01a      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e013      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365c:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003678:	e006      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      break;
 800367e:	e004      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003688:	bf00      	nop
    }

    if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	430b      	orrs	r3, r1
 80036a6:	4944      	ldr	r1, [pc, #272]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d17d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036be:	f7fd fec3 	bl	8001448 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c4:	e009      	b.n	80036da <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c6:	f7fd febf 	bl	8001448 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d902      	bls.n	80036da <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	73fb      	strb	r3, [r7, #15]
        break;
 80036d8:	e005      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ef      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d160      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d111      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	0211      	lsls	r1, r2, #8
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	0912      	lsrs	r2, r2, #4
 800370a:	0452      	lsls	r2, r2, #17
 800370c:	430a      	orrs	r2, r1
 800370e:	492a      	ldr	r1, [pc, #168]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	610b      	str	r3, [r1, #16]
 8003714:	e027      	b.n	8003766 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d112      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6892      	ldr	r2, [r2, #8]
 800372c:	0211      	lsls	r1, r2, #8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6912      	ldr	r2, [r2, #16]
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	3a01      	subs	r2, #1
 8003736:	0552      	lsls	r2, r2, #21
 8003738:	430a      	orrs	r2, r1
 800373a:	491f      	ldr	r1, [pc, #124]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	610b      	str	r3, [r1, #16]
 8003740:	e011      	b.n	8003766 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800374a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	0211      	lsls	r1, r2, #8
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6952      	ldr	r2, [r2, #20]
 8003758:	0852      	lsrs	r2, r2, #1
 800375a:	3a01      	subs	r2, #1
 800375c:	0652      	lsls	r2, r2, #25
 800375e:	430a      	orrs	r2, r1
 8003760:	4915      	ldr	r1, [pc, #84]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800376c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003770:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fe69 	bl	8001448 <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003778:	e009      	b.n	800378e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377a:	f7fd fe65 	bl	8001448 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d902      	bls.n	800378e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	73fb      	strb	r3, [r7, #15]
          break;
 800378c:	e005      	b.n	800379a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ef      	beq.n	800377a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ca:	4b68      	ldr	r3, [pc, #416]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ee:	4b5f      	ldr	r3, [pc, #380]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
       ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d044      	beq.n	800388c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e041      	b.n	800388c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d00c      	beq.n	800382a <RCCEx_PLLSAI2_Config+0x6e>
 8003810:	2b03      	cmp	r3, #3
 8003812:	d013      	beq.n	800383c <RCCEx_PLLSAI2_Config+0x80>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d120      	bne.n	800385a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003818:	4b54      	ldr	r3, [pc, #336]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e01a      	b.n	8003860 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800382a:	4b50      	ldr	r3, [pc, #320]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383a:	e013      	b.n	8003864 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383c:	4b4b      	ldr	r3, [pc, #300]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10f      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003848:	4b48      	ldr	r3, [pc, #288]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003858:	e006      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      break;
 800385e:	e004      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003868:	bf00      	nop
    }

    if(status == HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	3b01      	subs	r3, #1
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	430b      	orrs	r3, r1
 8003886:	4939      	ldr	r1, [pc, #228]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d167      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a35      	ldr	r2, [pc, #212]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fd fdd3 	bl	8001448 <HAL_GetTick>
 80038a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a4:	e009      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a6:	f7fd fdcf 	bl	8001448 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	73fb      	strb	r3, [r7, #15]
        break;
 80038b8:	e005      	b.n	80038c6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ef      	bne.n	80038a6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d14a      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d111      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	0211      	lsls	r1, r2, #8
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68d2      	ldr	r2, [r2, #12]
 80038e8:	0912      	lsrs	r2, r2, #4
 80038ea:	0452      	lsls	r2, r2, #17
 80038ec:	430a      	orrs	r2, r1
 80038ee:	491f      	ldr	r1, [pc, #124]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	614b      	str	r3, [r1, #20]
 80038f4:	e011      	b.n	800391a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6912      	ldr	r2, [r2, #16]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0652      	lsls	r2, r2, #25
 8003912:	430a      	orrs	r2, r1
 8003914:	4915      	ldr	r1, [pc, #84]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a13      	ldr	r2, [pc, #76]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fd fd8f 	bl	8001448 <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800392c:	e009      	b.n	8003942 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800392e:	f7fd fd8b 	bl	8001448 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d902      	bls.n	8003942 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	73fb      	strb	r3, [r7, #15]
          break;
 8003940:	e005      	b.n	800394e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ef      	beq.n	800392e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07c      	b.n	8003a7c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fd fae5 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c2:	d902      	bls.n	80039ca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e002      	b.n	80039d0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039d8:	d007      	beq.n	80039ea <HAL_SPI_Init+0x7a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039fa:	d903      	bls.n	8003a04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
 8003a02:	e002      	b.n	8003a0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	ea42 0103 	orr.w	r1, r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0204 	and.w	r2, r3, #4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e040      	b.n	8003b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd faa4 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8c0 	bl	8003c48 <UART_SetConfig>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e022      	b.n	8003b18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fc26 	bl	800432c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fcad 	bl	8004470 <UART_CheckIdleState>
 8003b16:	4603      	mov	r3, r0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	f040 8081 	bne.w	8003c3c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_Transmit+0x26>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e079      	b.n	8003c3e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Transmit+0x38>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e072      	b.n	8003c3e <HAL_UART_Transmit+0x11e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2221      	movs	r2, #33	; 0x21
 8003b6a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fd fc6c 	bl	8001448 <HAL_GetTick>
 8003b70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d108      	bne.n	8003b9e <HAL_UART_Transmit+0x7e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e003      	b.n	8003ba6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003bae:	e02d      	b.n	8003c0c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fc9d 	bl	80044fa <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e039      	b.n	8003c3e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	881a      	ldrh	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3302      	adds	r3, #2
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e008      	b.n	8003bfa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1cb      	bne.n	8003bb0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2140      	movs	r1, #64	; 0x40
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fc69 	bl	80044fa <UART_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e005      	b.n	8003c3e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4bb8      	ldr	r3, [pc, #736]	; (8003f60 <UART_SetConfig+0x318>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4aae      	ldr	r2, [pc, #696]	; (8003f64 <UART_SetConfig+0x31c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4aa5      	ldr	r2, [pc, #660]	; (8003f68 <UART_SetConfig+0x320>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d126      	bne.n	8003d26 <UART_SetConfig+0xde>
 8003cd8:	4ba4      	ldr	r3, [pc, #656]	; (8003f6c <UART_SetConfig+0x324>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d81a      	bhi.n	8003d1c <UART_SetConfig+0xd4>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0xa4>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d15 	.word	0x08003d15
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e105      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e101      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e0fd      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e0f9      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	bf00      	nop
 8003d24:	e0f4      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a91      	ldr	r2, [pc, #580]	; (8003f70 <UART_SetConfig+0x328>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d138      	bne.n	8003da2 <UART_SetConfig+0x15a>
 8003d30:	4b8e      	ldr	r3, [pc, #568]	; (8003f6c <UART_SetConfig+0x324>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	d82c      	bhi.n	8003d98 <UART_SetConfig+0x150>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0xfc>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003d99 	.word	0x08003d99
 8003d4c:	08003d99 	.word	0x08003d99
 8003d50:	08003d99 	.word	0x08003d99
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003d99 	.word	0x08003d99
 8003d5c:	08003d99 	.word	0x08003d99
 8003d60:	08003d99 	.word	0x08003d99
 8003d64:	08003d81 	.word	0x08003d81
 8003d68:	08003d99 	.word	0x08003d99
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003d91 	.word	0x08003d91
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e0c7      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e0c3      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e0bf      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e0bb      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	bf00      	nop
 8003da0:	e0b6      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a73      	ldr	r2, [pc, #460]	; (8003f74 <UART_SetConfig+0x32c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d125      	bne.n	8003df8 <UART_SetConfig+0x1b0>
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <UART_SetConfig+0x324>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d011      	beq.n	8003dde <UART_SetConfig+0x196>
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d802      	bhi.n	8003dc4 <UART_SetConfig+0x17c>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <UART_SetConfig+0x186>
 8003dc2:	e014      	b.n	8003dee <UART_SetConfig+0x1a6>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d006      	beq.n	8003dd6 <UART_SetConfig+0x18e>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d00c      	beq.n	8003de6 <UART_SetConfig+0x19e>
 8003dcc:	e00f      	b.n	8003dee <UART_SetConfig+0x1a6>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e09c      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	e098      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003dde:	2304      	movs	r3, #4
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de4:	e094      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003de6:	2308      	movs	r3, #8
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dec:	e090      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003dee:	2310      	movs	r3, #16
 8003df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df4:	bf00      	nop
 8003df6:	e08b      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <UART_SetConfig+0x330>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d125      	bne.n	8003e4e <UART_SetConfig+0x206>
 8003e02:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <UART_SetConfig+0x324>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d011      	beq.n	8003e34 <UART_SetConfig+0x1ec>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d802      	bhi.n	8003e1a <UART_SetConfig+0x1d2>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <UART_SetConfig+0x1dc>
 8003e18:	e014      	b.n	8003e44 <UART_SetConfig+0x1fc>
 8003e1a:	2b80      	cmp	r3, #128	; 0x80
 8003e1c:	d006      	beq.n	8003e2c <UART_SetConfig+0x1e4>
 8003e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e20:	d00c      	beq.n	8003e3c <UART_SetConfig+0x1f4>
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x1fc>
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e071      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e06d      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e069      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e065      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	bf00      	nop
 8003e4c:	e060      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <UART_SetConfig+0x334>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d129      	bne.n	8003eac <UART_SetConfig+0x264>
 8003e58:	4b44      	ldr	r3, [pc, #272]	; (8003f6c <UART_SetConfig+0x324>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e66:	d014      	beq.n	8003e92 <UART_SetConfig+0x24a>
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d802      	bhi.n	8003e74 <UART_SetConfig+0x22c>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <UART_SetConfig+0x23a>
 8003e72:	e016      	b.n	8003ea2 <UART_SetConfig+0x25a>
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e78:	d007      	beq.n	8003e8a <UART_SetConfig+0x242>
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d00c      	beq.n	8003e9a <UART_SetConfig+0x252>
 8003e80:	e00f      	b.n	8003ea2 <UART_SetConfig+0x25a>
 8003e82:	2300      	movs	r3, #0
 8003e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e88:	e042      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e90:	e03e      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e92:	2304      	movs	r3, #4
 8003e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e98:	e03a      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea0:	e036      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea8:	bf00      	nop
 8003eaa:	e031      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2c      	ldr	r2, [pc, #176]	; (8003f64 <UART_SetConfig+0x31c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d129      	bne.n	8003f0a <UART_SetConfig+0x2c2>
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <UART_SetConfig+0x324>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d014      	beq.n	8003ef0 <UART_SetConfig+0x2a8>
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d802      	bhi.n	8003ed2 <UART_SetConfig+0x28a>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <UART_SetConfig+0x298>
 8003ed0:	e016      	b.n	8003f00 <UART_SetConfig+0x2b8>
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed6:	d007      	beq.n	8003ee8 <UART_SetConfig+0x2a0>
 8003ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003edc:	d00c      	beq.n	8003ef8 <UART_SetConfig+0x2b0>
 8003ede:	e00f      	b.n	8003f00 <UART_SetConfig+0x2b8>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e013      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e00b      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e007      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <UART_SetConfig+0x2c8>
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <UART_SetConfig+0x31c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f040 80fe 	bne.w	8004118 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d837      	bhi.n	8003f94 <UART_SetConfig+0x34c>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x2e4>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f95 	.word	0x08003f95
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f95 	.word	0x08003f95
 8003f3c:	08003f85 	.word	0x08003f85
 8003f40:	08003f95 	.word	0x08003f95
 8003f44:	08003f95 	.word	0x08003f95
 8003f48:	08003f95 	.word	0x08003f95
 8003f4c:	08003f8d 	.word	0x08003f8d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe ffc2 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8003f54:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f56:	e020      	b.n	8003f9a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <UART_SetConfig+0x338>)
 8003f5a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f5c:	e01d      	b.n	8003f9a <UART_SetConfig+0x352>
 8003f5e:	bf00      	nop
 8003f60:	efff69f3 	.word	0xefff69f3
 8003f64:	40008000 	.word	0x40008000
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40004400 	.word	0x40004400
 8003f74:	40004800 	.word	0x40004800
 8003f78:	40004c00 	.word	0x40004c00
 8003f7c:	40005000 	.word	0x40005000
 8003f80:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003f84:	f7fe ff12 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8003f88:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f8a:	e006      	b.n	8003f9a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f92:	e002      	b.n	8003f9a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	76fb      	strb	r3, [r7, #27]
        break;
 8003f98:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 81b9 	beq.w	8004314 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d305      	bcc.n	8003fbe <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d902      	bls.n	8003fc4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e1a7      	b.n	8004314 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8003fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	f200 8092 	bhi.w	80040f2 <UART_SetConfig+0x4aa>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x38c>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	080040f3 	.word	0x080040f3
 8003fdc:	08004047 	.word	0x08004047
 8003fe0:	080040f3 	.word	0x080040f3
 8003fe4:	0800407b 	.word	0x0800407b
 8003fe8:	080040f3 	.word	0x080040f3
 8003fec:	080040f3 	.word	0x080040f3
 8003ff0:	080040f3 	.word	0x080040f3
 8003ff4:	080040c9 	.word	0x080040c9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe ff6e 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	0214      	lsls	r4, r2, #8
 8004010:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004014:	020b      	lsls	r3, r1, #8
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6852      	ldr	r2, [r2, #4]
 800401a:	0852      	lsrs	r2, r2, #1
 800401c:	4611      	mov	r1, r2
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	eb13 0b01 	adds.w	fp, r3, r1
 8004026:	eb44 0c02 	adc.w	ip, r4, r2
 800402a:	4658      	mov	r0, fp
 800402c:	4661      	mov	r1, ip
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f04f 0400 	mov.w	r4, #0
 8004036:	461a      	mov	r2, r3
 8004038:	4623      	mov	r3, r4
 800403a:	f7fc f921 	bl	8000280 <__aeabi_uldivmod>
 800403e:	4603      	mov	r3, r0
 8004040:	460c      	mov	r4, r1
 8004042:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004044:	e058      	b.n	80040f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	f04f 0400 	mov.w	r4, #0
 8004050:	49ae      	ldr	r1, [pc, #696]	; (800430c <UART_SetConfig+0x6c4>)
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	eb13 0b01 	adds.w	fp, r3, r1
 800405a:	eb44 0c02 	adc.w	ip, r4, r2
 800405e:	4658      	mov	r0, fp
 8004060:	4661      	mov	r1, ip
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	f7fc f907 	bl	8000280 <__aeabi_uldivmod>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004078:	e03e      	b.n	80040f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7fe fe97 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 800407e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4619      	mov	r1, r3
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	f04f 0400 	mov.w	r4, #0
 8004090:	0214      	lsls	r4, r2, #8
 8004092:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004096:	020b      	lsls	r3, r1, #8
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6852      	ldr	r2, [r2, #4]
 800409c:	0852      	lsrs	r2, r2, #1
 800409e:	4611      	mov	r1, r2
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	eb13 0b01 	adds.w	fp, r3, r1
 80040a8:	eb44 0c02 	adc.w	ip, r4, r2
 80040ac:	4658      	mov	r0, fp
 80040ae:	4661      	mov	r1, ip
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7fc f8e0 	bl	8000280 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040c6:	e017      	b.n	80040f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80040d6:	f144 0100 	adc.w	r1, r4, #0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f04f 0400 	mov.w	r4, #0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4623      	mov	r3, r4
 80040e6:	f7fc f8cb 	bl	8000280 <__aeabi_uldivmod>
 80040ea:	4603      	mov	r3, r0
 80040ec:	460c      	mov	r4, r1
 80040ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040f0:	e002      	b.n	80040f8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	76fb      	strb	r3, [r7, #27]
            break;
 80040f6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040fe:	d308      	bcc.n	8004112 <UART_SetConfig+0x4ca>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004106:	d204      	bcs.n	8004112 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e100      	b.n	8004314 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	76fb      	strb	r3, [r7, #27]
 8004116:	e0fd      	b.n	8004314 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	f040 8084 	bne.w	800422c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004128:	2b08      	cmp	r3, #8
 800412a:	d85f      	bhi.n	80041ec <UART_SetConfig+0x5a4>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <UART_SetConfig+0x4ec>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004159 	.word	0x08004159
 8004138:	08004179 	.word	0x08004179
 800413c:	08004199 	.word	0x08004199
 8004140:	080041ed 	.word	0x080041ed
 8004144:	080041b5 	.word	0x080041b5
 8004148:	080041ed 	.word	0x080041ed
 800414c:	080041ed 	.word	0x080041ed
 8004150:	080041ed 	.word	0x080041ed
 8004154:	080041d5 	.word	0x080041d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004158:	f7fe febe 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 800415c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	005a      	lsls	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	b29b      	uxth	r3, r3
 8004174:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004176:	e03c      	b.n	80041f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004178:	f7fe fec4 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 800417c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	005a      	lsls	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004196:	e02c      	b.n	80041f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80041a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6852      	ldr	r2, [r2, #4]
 80041aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041b2:	e01e      	b.n	80041f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b4:	f7fe fdfa 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 80041b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	005a      	lsls	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041d2:	e00e      	b.n	80041f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041ea:	e002      	b.n	80041f2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	76fb      	strb	r3, [r7, #27]
        break;
 80041f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d916      	bls.n	8004226 <UART_SetConfig+0x5de>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d212      	bcs.n	8004226 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f023 030f 	bic.w	r3, r3, #15
 8004208:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	b29a      	uxth	r2, r3
 8004216:	89fb      	ldrh	r3, [r7, #14]
 8004218:	4313      	orrs	r3, r2
 800421a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	89fa      	ldrh	r2, [r7, #14]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e076      	b.n	8004314 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e073      	b.n	8004314 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800422c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004230:	2b08      	cmp	r3, #8
 8004232:	d85c      	bhi.n	80042ee <UART_SetConfig+0x6a6>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0x5f4>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004261 	.word	0x08004261
 8004240:	0800427f 	.word	0x0800427f
 8004244:	0800429d 	.word	0x0800429d
 8004248:	080042ef 	.word	0x080042ef
 800424c:	080042b9 	.word	0x080042b9
 8004250:	080042ef 	.word	0x080042ef
 8004254:	080042ef 	.word	0x080042ef
 8004258:	080042ef 	.word	0x080042ef
 800425c:	080042d7 	.word	0x080042d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe fe3a 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8004264:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	085a      	lsrs	r2, r3, #1
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	441a      	add	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	b29b      	uxth	r3, r3
 800427a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800427c:	e03a      	b.n	80042f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800427e:	f7fe fe41 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 8004282:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	085a      	lsrs	r2, r3, #1
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	b29b      	uxth	r3, r3
 8004298:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800429a:	e02b      	b.n	80042f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80042a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6852      	ldr	r2, [r2, #4]
 80042ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042b6:	e01d      	b.n	80042f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b8:	f7fe fd78 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 80042bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	085a      	lsrs	r2, r3, #1
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042d4:	e00e      	b.n	80042f4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ec:	e002      	b.n	80042f4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	76fb      	strb	r3, [r7, #27]
        break;
 80042f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d90a      	bls.n	8004310 <UART_SetConfig+0x6c8>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d206      	bcs.n	8004310 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	e003      	b.n	8004314 <UART_SetConfig+0x6cc>
 800430c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004320:	7efb      	ldrb	r3, [r7, #27]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3728      	adds	r7, #40	; 0x28
 8004326:	46bd      	mov	sp, r7
 8004328:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800432c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d10a      	bne.n	8004442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800447e:	f7fc ffe3 	bl	8001448 <HAL_GetTick>
 8004482:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	d10e      	bne.n	80044b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004492:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f82a 	bl	80044fa <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e020      	b.n	80044f2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d10e      	bne.n	80044dc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f814 	bl	80044fa <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e00a      	b.n	80044f2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4613      	mov	r3, r2
 8004508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450a:	e05d      	b.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d059      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	f7fc ff98 	bl	8001448 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <UART_WaitOnFlagUntilTimeout+0x30>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11b      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004538:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e042      	b.n	80045e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02b      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d123      	bne.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004588:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004598:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e00f      	b.n	80045e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d092      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f0:	b084      	sub	sp, #16
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	f107 001c 	add.w	r0, r7, #28
 80045fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b01      	cmp	r3, #1
 8004606:	d122      	bne.n	800464e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800461c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa28 	bl	8004a98 <USB_CoreReset>
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]
 800464c:	e01a      	b.n	8004684 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa1c 	bl	8004a98 <USB_CoreReset>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
 8004676:	e005      	b.n	8004684 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004690:	b004      	add	sp, #16
 8004692:	4770      	bx	lr

08004694 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f023 0201 	bic.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e00b      	b.n	80046fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e001      	b.n	80046fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e003      	b.n	8004702 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046fa:	2032      	movs	r0, #50	; 0x32
 80046fc:	f7fc feb0 	bl	8001460 <HAL_Delay>

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800470c:	b084      	sub	sp, #16
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800471a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	e009      	b.n	8004740 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3340      	adds	r3, #64	; 0x40
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	3301      	adds	r3, #1
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0e      	cmp	r3, #14
 8004744:	d9f2      	bls.n	800472c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11c      	bne.n	8004786 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e005      	b.n	8004792 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a4:	4619      	mov	r1, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	461a      	mov	r2, r3
 80047ae:	680b      	ldr	r3, [r1, #0]
 80047b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047b2:	2103      	movs	r1, #3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f93d 	bl	8004a34 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047ba:	2110      	movs	r1, #16
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f8f1 	bl	80049a4 <USB_FlushTxFifo>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f90f 	bl	80049f0 <USB_FlushRxFifo>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	461a      	mov	r2, r3
 80047e4:	2300      	movs	r3, #0
 80047e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	461a      	mov	r2, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	e043      	b.n	800488e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481c:	d118      	bne.n	8004850 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	461a      	mov	r2, r3
 8004832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e013      	b.n	8004862 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	461a      	mov	r2, r3
 8004848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e008      	b.n	8004862 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	461a      	mov	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	461a      	mov	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	461a      	mov	r2, r3
 8004882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d3b7      	bcc.n	8004806 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e043      	b.n	8004924 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b2:	d118      	bne.n	80048e6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	461a      	mov	r2, r3
 80048c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e013      	b.n	80048f8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	461a      	mov	r2, r3
 80048de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	e008      	b.n	80048f8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	461a      	mov	r2, r3
 8004918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800491c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	3301      	adds	r3, #1
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d3b7      	bcc.n	800489c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800494c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <USB_DevInit+0x294>)
 8004960:	4313      	orrs	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f043 0208 	orr.w	r2, r3, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800499a:	b004      	add	sp, #16
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	803c3800 	.word	0x803c3800

080049a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <USB_FlushTxFifo+0x48>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d0f0      	beq.n	80049be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	00030d40 	.word	0x00030d40

080049f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2210      	movs	r2, #16
 8004a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <USB_FlushRxFifo+0x40>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e006      	b.n	8004a22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d0f0      	beq.n	8004a02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	00030d40 	.word	0x00030d40

08004a34 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004a86:	2003      	movs	r0, #3
 8004a88:	f7fc fcea 	bl	8001460 <HAL_Delay>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <USB_CoreReset+0x64>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e01b      	b.n	8004aee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	daf2      	bge.n	8004aa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <USB_CoreReset+0x64>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e006      	b.n	8004aee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d0f0      	beq.n	8004ace <USB_CoreReset+0x36>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	00030d40 	.word	0x00030d40

08004b00 <__errno>:
 8004b00:	4b01      	ldr	r3, [pc, #4]	; (8004b08 <__errno+0x8>)
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	2000000c 	.word	0x2000000c

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4e0d      	ldr	r6, [pc, #52]	; (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	; (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1ba4      	subs	r4, r4, r6
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2500      	movs	r5, #0
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4e0b      	ldr	r6, [pc, #44]	; (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	; (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 fc26 	bl	8005370 <_init>
 8004b24:	1ba4      	subs	r4, r4, r6
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2500      	movs	r5, #0
 8004b2a:	42a5      	cmp	r5, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b34:	4798      	blx	r3
 8004b36:	3501      	adds	r5, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b3e:	4798      	blx	r3
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08005420 	.word	0x08005420
 8004b48:	08005420 	.word	0x08005420
 8004b4c:	08005420 	.word	0x08005420
 8004b50:	08005424 	.word	0x08005424

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <siprintf>:
 8004b64:	b40e      	push	{r1, r2, r3}
 8004b66:	b500      	push	{lr}
 8004b68:	b09c      	sub	sp, #112	; 0x70
 8004b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b6c:	9002      	str	r0, [sp, #8]
 8004b6e:	9006      	str	r0, [sp, #24]
 8004b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b74:	4809      	ldr	r0, [pc, #36]	; (8004b9c <siprintf+0x38>)
 8004b76:	9107      	str	r1, [sp, #28]
 8004b78:	9104      	str	r1, [sp, #16]
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <siprintf+0x3c>)
 8004b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	6800      	ldr	r0, [r0, #0]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	a902      	add	r1, sp, #8
 8004b88:	f000 f866 	bl	8004c58 <_svfiprintf_r>
 8004b8c:	9b02      	ldr	r3, [sp, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	b01c      	add	sp, #112	; 0x70
 8004b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b98:	b003      	add	sp, #12
 8004b9a:	4770      	bx	lr
 8004b9c:	2000000c 	.word	0x2000000c
 8004ba0:	ffff0208 	.word	0xffff0208

08004ba4 <__ssputs_r>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	688e      	ldr	r6, [r1, #8]
 8004baa:	429e      	cmp	r6, r3
 8004bac:	4682      	mov	sl, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4690      	mov	r8, r2
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	d837      	bhi.n	8004c26 <__ssputs_r+0x82>
 8004bb6:	898a      	ldrh	r2, [r1, #12]
 8004bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bbc:	d031      	beq.n	8004c22 <__ssputs_r+0x7e>
 8004bbe:	6825      	ldr	r5, [r4, #0]
 8004bc0:	6909      	ldr	r1, [r1, #16]
 8004bc2:	1a6f      	subs	r7, r5, r1
 8004bc4:	6965      	ldr	r5, [r4, #20]
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bcc:	fb95 f5f3 	sdiv	r5, r5, r3
 8004bd0:	f109 0301 	add.w	r3, r9, #1
 8004bd4:	443b      	add	r3, r7
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	bf38      	it	cc
 8004bda:	461d      	movcc	r5, r3
 8004bdc:	0553      	lsls	r3, r2, #21
 8004bde:	d530      	bpl.n	8004c42 <__ssputs_r+0x9e>
 8004be0:	4629      	mov	r1, r5
 8004be2:	f000 fb2b 	bl	800523c <_malloc_r>
 8004be6:	4606      	mov	r6, r0
 8004be8:	b950      	cbnz	r0, 8004c00 <__ssputs_r+0x5c>
 8004bea:	230c      	movs	r3, #12
 8004bec:	f8ca 3000 	str.w	r3, [sl]
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	463a      	mov	r2, r7
 8004c02:	6921      	ldr	r1, [r4, #16]
 8004c04:	f000 faa8 	bl	8005158 <memcpy>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	6126      	str	r6, [r4, #16]
 8004c16:	6165      	str	r5, [r4, #20]
 8004c18:	443e      	add	r6, r7
 8004c1a:	1bed      	subs	r5, r5, r7
 8004c1c:	6026      	str	r6, [r4, #0]
 8004c1e:	60a5      	str	r5, [r4, #8]
 8004c20:	464e      	mov	r6, r9
 8004c22:	454e      	cmp	r6, r9
 8004c24:	d900      	bls.n	8004c28 <__ssputs_r+0x84>
 8004c26:	464e      	mov	r6, r9
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	f000 fa9e 	bl	800516e <memmove>
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	1b9b      	subs	r3, r3, r6
 8004c36:	60a3      	str	r3, [r4, #8]
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	441e      	add	r6, r3
 8004c3c:	6026      	str	r6, [r4, #0]
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e7dc      	b.n	8004bfc <__ssputs_r+0x58>
 8004c42:	462a      	mov	r2, r5
 8004c44:	f000 fb54 	bl	80052f0 <_realloc_r>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d1e2      	bne.n	8004c14 <__ssputs_r+0x70>
 8004c4e:	6921      	ldr	r1, [r4, #16]
 8004c50:	4650      	mov	r0, sl
 8004c52:	f000 faa5 	bl	80051a0 <_free_r>
 8004c56:	e7c8      	b.n	8004bea <__ssputs_r+0x46>

08004c58 <_svfiprintf_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	461d      	mov	r5, r3
 8004c5e:	898b      	ldrh	r3, [r1, #12]
 8004c60:	061f      	lsls	r7, r3, #24
 8004c62:	b09d      	sub	sp, #116	; 0x74
 8004c64:	4680      	mov	r8, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	4616      	mov	r6, r2
 8004c6a:	d50f      	bpl.n	8004c8c <_svfiprintf_r+0x34>
 8004c6c:	690b      	ldr	r3, [r1, #16]
 8004c6e:	b96b      	cbnz	r3, 8004c8c <_svfiprintf_r+0x34>
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	f000 fae3 	bl	800523c <_malloc_r>
 8004c76:	6020      	str	r0, [r4, #0]
 8004c78:	6120      	str	r0, [r4, #16]
 8004c7a:	b928      	cbnz	r0, 8004c88 <_svfiprintf_r+0x30>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	f8c8 3000 	str.w	r3, [r8]
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	e0c8      	b.n	8004e1a <_svfiprintf_r+0x1c2>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c90:	2320      	movs	r3, #32
 8004c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c96:	2330      	movs	r3, #48	; 0x30
 8004c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c9c:	9503      	str	r5, [sp, #12]
 8004c9e:	f04f 0b01 	mov.w	fp, #1
 8004ca2:	4637      	mov	r7, r6
 8004ca4:	463d      	mov	r5, r7
 8004ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004caa:	b10b      	cbz	r3, 8004cb0 <_svfiprintf_r+0x58>
 8004cac:	2b25      	cmp	r3, #37	; 0x25
 8004cae:	d13e      	bne.n	8004d2e <_svfiprintf_r+0xd6>
 8004cb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cb4:	d00b      	beq.n	8004cce <_svfiprintf_r+0x76>
 8004cb6:	4653      	mov	r3, sl
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	f7ff ff71 	bl	8004ba4 <__ssputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f000 80a4 	beq.w	8004e10 <_svfiprintf_r+0x1b8>
 8004cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cca:	4453      	add	r3, sl
 8004ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cce:	783b      	ldrb	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 809d 	beq.w	8004e10 <_svfiprintf_r+0x1b8>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	9307      	str	r3, [sp, #28]
 8004ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8004cea:	462f      	mov	r7, r5
 8004cec:	2205      	movs	r2, #5
 8004cee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004cf2:	4850      	ldr	r0, [pc, #320]	; (8004e34 <_svfiprintf_r+0x1dc>)
 8004cf4:	f7fb fa74 	bl	80001e0 <memchr>
 8004cf8:	9b04      	ldr	r3, [sp, #16]
 8004cfa:	b9d0      	cbnz	r0, 8004d32 <_svfiprintf_r+0xda>
 8004cfc:	06d9      	lsls	r1, r3, #27
 8004cfe:	bf44      	itt	mi
 8004d00:	2220      	movmi	r2, #32
 8004d02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d06:	071a      	lsls	r2, r3, #28
 8004d08:	bf44      	itt	mi
 8004d0a:	222b      	movmi	r2, #43	; 0x2b
 8004d0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d10:	782a      	ldrb	r2, [r5, #0]
 8004d12:	2a2a      	cmp	r2, #42	; 0x2a
 8004d14:	d015      	beq.n	8004d42 <_svfiprintf_r+0xea>
 8004d16:	9a07      	ldr	r2, [sp, #28]
 8004d18:	462f      	mov	r7, r5
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	250a      	movs	r5, #10
 8004d1e:	4639      	mov	r1, r7
 8004d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d24:	3b30      	subs	r3, #48	; 0x30
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d94d      	bls.n	8004dc6 <_svfiprintf_r+0x16e>
 8004d2a:	b1b8      	cbz	r0, 8004d5c <_svfiprintf_r+0x104>
 8004d2c:	e00f      	b.n	8004d4e <_svfiprintf_r+0xf6>
 8004d2e:	462f      	mov	r7, r5
 8004d30:	e7b8      	b.n	8004ca4 <_svfiprintf_r+0x4c>
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <_svfiprintf_r+0x1dc>)
 8004d34:	1a80      	subs	r0, r0, r2
 8004d36:	fa0b f000 	lsl.w	r0, fp, r0
 8004d3a:	4318      	orrs	r0, r3
 8004d3c:	9004      	str	r0, [sp, #16]
 8004d3e:	463d      	mov	r5, r7
 8004d40:	e7d3      	b.n	8004cea <_svfiprintf_r+0x92>
 8004d42:	9a03      	ldr	r2, [sp, #12]
 8004d44:	1d11      	adds	r1, r2, #4
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	9103      	str	r1, [sp, #12]
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	db01      	blt.n	8004d52 <_svfiprintf_r+0xfa>
 8004d4e:	9207      	str	r2, [sp, #28]
 8004d50:	e004      	b.n	8004d5c <_svfiprintf_r+0x104>
 8004d52:	4252      	negs	r2, r2
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	9207      	str	r2, [sp, #28]
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	783b      	ldrb	r3, [r7, #0]
 8004d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d60:	d10c      	bne.n	8004d7c <_svfiprintf_r+0x124>
 8004d62:	787b      	ldrb	r3, [r7, #1]
 8004d64:	2b2a      	cmp	r3, #42	; 0x2a
 8004d66:	d133      	bne.n	8004dd0 <_svfiprintf_r+0x178>
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	9203      	str	r2, [sp, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bfb8      	it	lt
 8004d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d78:	3702      	adds	r7, #2
 8004d7a:	9305      	str	r3, [sp, #20]
 8004d7c:	4d2e      	ldr	r5, [pc, #184]	; (8004e38 <_svfiprintf_r+0x1e0>)
 8004d7e:	7839      	ldrb	r1, [r7, #0]
 8004d80:	2203      	movs	r2, #3
 8004d82:	4628      	mov	r0, r5
 8004d84:	f7fb fa2c 	bl	80001e0 <memchr>
 8004d88:	b138      	cbz	r0, 8004d9a <_svfiprintf_r+0x142>
 8004d8a:	2340      	movs	r3, #64	; 0x40
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d92:	9b04      	ldr	r3, [sp, #16]
 8004d94:	4303      	orrs	r3, r0
 8004d96:	3701      	adds	r7, #1
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	7839      	ldrb	r1, [r7, #0]
 8004d9c:	4827      	ldr	r0, [pc, #156]	; (8004e3c <_svfiprintf_r+0x1e4>)
 8004d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da2:	2206      	movs	r2, #6
 8004da4:	1c7e      	adds	r6, r7, #1
 8004da6:	f7fb fa1b 	bl	80001e0 <memchr>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d038      	beq.n	8004e20 <_svfiprintf_r+0x1c8>
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <_svfiprintf_r+0x1e8>)
 8004db0:	bb13      	cbnz	r3, 8004df8 <_svfiprintf_r+0x1a0>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	3307      	adds	r3, #7
 8004db6:	f023 0307 	bic.w	r3, r3, #7
 8004dba:	3308      	adds	r3, #8
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc0:	444b      	add	r3, r9
 8004dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc4:	e76d      	b.n	8004ca2 <_svfiprintf_r+0x4a>
 8004dc6:	fb05 3202 	mla	r2, r5, r2, r3
 8004dca:	2001      	movs	r0, #1
 8004dcc:	460f      	mov	r7, r1
 8004dce:	e7a6      	b.n	8004d1e <_svfiprintf_r+0xc6>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	3701      	adds	r7, #1
 8004dd4:	9305      	str	r3, [sp, #20]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	250a      	movs	r5, #10
 8004dda:	4638      	mov	r0, r7
 8004ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de0:	3a30      	subs	r2, #48	; 0x30
 8004de2:	2a09      	cmp	r2, #9
 8004de4:	d903      	bls.n	8004dee <_svfiprintf_r+0x196>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0c8      	beq.n	8004d7c <_svfiprintf_r+0x124>
 8004dea:	9105      	str	r1, [sp, #20]
 8004dec:	e7c6      	b.n	8004d7c <_svfiprintf_r+0x124>
 8004dee:	fb05 2101 	mla	r1, r5, r1, r2
 8004df2:	2301      	movs	r3, #1
 8004df4:	4607      	mov	r7, r0
 8004df6:	e7f0      	b.n	8004dda <_svfiprintf_r+0x182>
 8004df8:	ab03      	add	r3, sp, #12
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <_svfiprintf_r+0x1ec>)
 8004e00:	a904      	add	r1, sp, #16
 8004e02:	4640      	mov	r0, r8
 8004e04:	f3af 8000 	nop.w
 8004e08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	d1d6      	bne.n	8004dbe <_svfiprintf_r+0x166>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	065b      	lsls	r3, r3, #25
 8004e14:	f53f af35 	bmi.w	8004c82 <_svfiprintf_r+0x2a>
 8004e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e1a:	b01d      	add	sp, #116	; 0x74
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	4622      	mov	r2, r4
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <_svfiprintf_r+0x1ec>)
 8004e28:	a904      	add	r1, sp, #16
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f000 f882 	bl	8004f34 <_printf_i>
 8004e30:	e7ea      	b.n	8004e08 <_svfiprintf_r+0x1b0>
 8004e32:	bf00      	nop
 8004e34:	080053e4 	.word	0x080053e4
 8004e38:	080053ea 	.word	0x080053ea
 8004e3c:	080053ee 	.word	0x080053ee
 8004e40:	00000000 	.word	0x00000000
 8004e44:	08004ba5 	.word	0x08004ba5

08004e48 <_printf_common>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	4691      	mov	r9, r2
 8004e4e:	461f      	mov	r7, r3
 8004e50:	688a      	ldr	r2, [r1, #8]
 8004e52:	690b      	ldr	r3, [r1, #16]
 8004e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	bfb8      	it	lt
 8004e5c:	4613      	movlt	r3, r2
 8004e5e:	f8c9 3000 	str.w	r3, [r9]
 8004e62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e66:	4606      	mov	r6, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	b112      	cbz	r2, 8004e72 <_printf_common+0x2a>
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f8c9 3000 	str.w	r3, [r9]
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	0699      	lsls	r1, r3, #26
 8004e76:	bf42      	ittt	mi
 8004e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e7c:	3302      	addmi	r3, #2
 8004e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	f015 0506 	ands.w	r5, r5, #6
 8004e88:	d107      	bne.n	8004e9a <_printf_common+0x52>
 8004e8a:	f104 0a19 	add.w	sl, r4, #25
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	f8d9 2000 	ldr.w	r2, [r9]
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	42ab      	cmp	r3, r5
 8004e98:	dc28      	bgt.n	8004eec <_printf_common+0xa4>
 8004e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	3300      	adds	r3, #0
 8004ea2:	bf18      	it	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	0692      	lsls	r2, r2, #26
 8004ea8:	d42d      	bmi.n	8004f06 <_printf_common+0xbe>
 8004eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eae:	4639      	mov	r1, r7
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	47c0      	blx	r8
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d020      	beq.n	8004efa <_printf_common+0xb2>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	68e5      	ldr	r5, [r4, #12]
 8004ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ec0:	f003 0306 	and.w	r3, r3, #6
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	bf08      	it	eq
 8004ec8:	1aad      	subeq	r5, r5, r2
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	bf0c      	ite	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	2500      	movne	r5, #0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfc4      	itt	gt
 8004eda:	1a9b      	subgt	r3, r3, r2
 8004edc:	18ed      	addgt	r5, r5, r3
 8004ede:	f04f 0900 	mov.w	r9, #0
 8004ee2:	341a      	adds	r4, #26
 8004ee4:	454d      	cmp	r5, r9
 8004ee6:	d11a      	bne.n	8004f1e <_printf_common+0xd6>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e008      	b.n	8004efe <_printf_common+0xb6>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4652      	mov	r2, sl
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	47c0      	blx	r8
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d103      	bne.n	8004f02 <_printf_common+0xba>
 8004efa:	f04f 30ff 	mov.w	r0, #4294967295
 8004efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f02:	3501      	adds	r5, #1
 8004f04:	e7c3      	b.n	8004e8e <_printf_common+0x46>
 8004f06:	18e1      	adds	r1, r4, r3
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	2030      	movs	r0, #48	; 0x30
 8004f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f10:	4422      	add	r2, r4
 8004f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	e7c5      	b.n	8004eaa <_printf_common+0x62>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4622      	mov	r2, r4
 8004f22:	4639      	mov	r1, r7
 8004f24:	4630      	mov	r0, r6
 8004f26:	47c0      	blx	r8
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d0e6      	beq.n	8004efa <_printf_common+0xb2>
 8004f2c:	f109 0901 	add.w	r9, r9, #1
 8004f30:	e7d8      	b.n	8004ee4 <_printf_common+0x9c>
	...

08004f34 <_printf_i>:
 8004f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	7e09      	ldrb	r1, [r1, #24]
 8004f40:	b085      	sub	sp, #20
 8004f42:	296e      	cmp	r1, #110	; 0x6e
 8004f44:	4617      	mov	r7, r2
 8004f46:	4606      	mov	r6, r0
 8004f48:	4698      	mov	r8, r3
 8004f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f4c:	f000 80b3 	beq.w	80050b6 <_printf_i+0x182>
 8004f50:	d822      	bhi.n	8004f98 <_printf_i+0x64>
 8004f52:	2963      	cmp	r1, #99	; 0x63
 8004f54:	d036      	beq.n	8004fc4 <_printf_i+0x90>
 8004f56:	d80a      	bhi.n	8004f6e <_printf_i+0x3a>
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	f000 80b9 	beq.w	80050d0 <_printf_i+0x19c>
 8004f5e:	2958      	cmp	r1, #88	; 0x58
 8004f60:	f000 8083 	beq.w	800506a <_printf_i+0x136>
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f6c:	e032      	b.n	8004fd4 <_printf_i+0xa0>
 8004f6e:	2964      	cmp	r1, #100	; 0x64
 8004f70:	d001      	beq.n	8004f76 <_printf_i+0x42>
 8004f72:	2969      	cmp	r1, #105	; 0x69
 8004f74:	d1f6      	bne.n	8004f64 <_printf_i+0x30>
 8004f76:	6820      	ldr	r0, [r4, #0]
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	0605      	lsls	r5, r0, #24
 8004f7c:	f103 0104 	add.w	r1, r3, #4
 8004f80:	d52a      	bpl.n	8004fd8 <_printf_i+0xa4>
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6011      	str	r1, [r2, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da03      	bge.n	8004f92 <_printf_i+0x5e>
 8004f8a:	222d      	movs	r2, #45	; 0x2d
 8004f8c:	425b      	negs	r3, r3
 8004f8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f92:	486f      	ldr	r0, [pc, #444]	; (8005150 <_printf_i+0x21c>)
 8004f94:	220a      	movs	r2, #10
 8004f96:	e039      	b.n	800500c <_printf_i+0xd8>
 8004f98:	2973      	cmp	r1, #115	; 0x73
 8004f9a:	f000 809d 	beq.w	80050d8 <_printf_i+0x1a4>
 8004f9e:	d808      	bhi.n	8004fb2 <_printf_i+0x7e>
 8004fa0:	296f      	cmp	r1, #111	; 0x6f
 8004fa2:	d020      	beq.n	8004fe6 <_printf_i+0xb2>
 8004fa4:	2970      	cmp	r1, #112	; 0x70
 8004fa6:	d1dd      	bne.n	8004f64 <_printf_i+0x30>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	e003      	b.n	8004fba <_printf_i+0x86>
 8004fb2:	2975      	cmp	r1, #117	; 0x75
 8004fb4:	d017      	beq.n	8004fe6 <_printf_i+0xb2>
 8004fb6:	2978      	cmp	r1, #120	; 0x78
 8004fb8:	d1d4      	bne.n	8004f64 <_printf_i+0x30>
 8004fba:	2378      	movs	r3, #120	; 0x78
 8004fbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fc0:	4864      	ldr	r0, [pc, #400]	; (8005154 <_printf_i+0x220>)
 8004fc2:	e055      	b.n	8005070 <_printf_i+0x13c>
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	1d19      	adds	r1, r3, #4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6011      	str	r1, [r2, #0]
 8004fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e08c      	b.n	80050f2 <_printf_i+0x1be>
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6011      	str	r1, [r2, #0]
 8004fdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fe0:	bf18      	it	ne
 8004fe2:	b21b      	sxthne	r3, r3
 8004fe4:	e7cf      	b.n	8004f86 <_printf_i+0x52>
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	6825      	ldr	r5, [r4, #0]
 8004fea:	1d18      	adds	r0, r3, #4
 8004fec:	6010      	str	r0, [r2, #0]
 8004fee:	0628      	lsls	r0, r5, #24
 8004ff0:	d501      	bpl.n	8004ff6 <_printf_i+0xc2>
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	e002      	b.n	8004ffc <_printf_i+0xc8>
 8004ff6:	0668      	lsls	r0, r5, #25
 8004ff8:	d5fb      	bpl.n	8004ff2 <_printf_i+0xbe>
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	4854      	ldr	r0, [pc, #336]	; (8005150 <_printf_i+0x21c>)
 8004ffe:	296f      	cmp	r1, #111	; 0x6f
 8005000:	bf14      	ite	ne
 8005002:	220a      	movne	r2, #10
 8005004:	2208      	moveq	r2, #8
 8005006:	2100      	movs	r1, #0
 8005008:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800500c:	6865      	ldr	r5, [r4, #4]
 800500e:	60a5      	str	r5, [r4, #8]
 8005010:	2d00      	cmp	r5, #0
 8005012:	f2c0 8095 	blt.w	8005140 <_printf_i+0x20c>
 8005016:	6821      	ldr	r1, [r4, #0]
 8005018:	f021 0104 	bic.w	r1, r1, #4
 800501c:	6021      	str	r1, [r4, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d13d      	bne.n	800509e <_printf_i+0x16a>
 8005022:	2d00      	cmp	r5, #0
 8005024:	f040 808e 	bne.w	8005144 <_printf_i+0x210>
 8005028:	4665      	mov	r5, ip
 800502a:	2a08      	cmp	r2, #8
 800502c:	d10b      	bne.n	8005046 <_printf_i+0x112>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	07db      	lsls	r3, r3, #31
 8005032:	d508      	bpl.n	8005046 <_printf_i+0x112>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	bfde      	ittt	le
 800503c:	2330      	movle	r3, #48	; 0x30
 800503e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005042:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005046:	ebac 0305 	sub.w	r3, ip, r5
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	f8cd 8000 	str.w	r8, [sp]
 8005050:	463b      	mov	r3, r7
 8005052:	aa03      	add	r2, sp, #12
 8005054:	4621      	mov	r1, r4
 8005056:	4630      	mov	r0, r6
 8005058:	f7ff fef6 	bl	8004e48 <_printf_common>
 800505c:	3001      	adds	r0, #1
 800505e:	d14d      	bne.n	80050fc <_printf_i+0x1c8>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	b005      	add	sp, #20
 8005066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800506a:	4839      	ldr	r0, [pc, #228]	; (8005150 <_printf_i+0x21c>)
 800506c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	6821      	ldr	r1, [r4, #0]
 8005074:	1d1d      	adds	r5, r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6015      	str	r5, [r2, #0]
 800507a:	060a      	lsls	r2, r1, #24
 800507c:	d50b      	bpl.n	8005096 <_printf_i+0x162>
 800507e:	07ca      	lsls	r2, r1, #31
 8005080:	bf44      	itt	mi
 8005082:	f041 0120 	orrmi.w	r1, r1, #32
 8005086:	6021      	strmi	r1, [r4, #0]
 8005088:	b91b      	cbnz	r3, 8005092 <_printf_i+0x15e>
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	f022 0220 	bic.w	r2, r2, #32
 8005090:	6022      	str	r2, [r4, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	e7b7      	b.n	8005006 <_printf_i+0xd2>
 8005096:	064d      	lsls	r5, r1, #25
 8005098:	bf48      	it	mi
 800509a:	b29b      	uxthmi	r3, r3
 800509c:	e7ef      	b.n	800507e <_printf_i+0x14a>
 800509e:	4665      	mov	r5, ip
 80050a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050a4:	fb02 3311 	mls	r3, r2, r1, r3
 80050a8:	5cc3      	ldrb	r3, [r0, r3]
 80050aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050ae:	460b      	mov	r3, r1
 80050b0:	2900      	cmp	r1, #0
 80050b2:	d1f5      	bne.n	80050a0 <_printf_i+0x16c>
 80050b4:	e7b9      	b.n	800502a <_printf_i+0xf6>
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	6961      	ldr	r1, [r4, #20]
 80050bc:	1d18      	adds	r0, r3, #4
 80050be:	6010      	str	r0, [r2, #0]
 80050c0:	0628      	lsls	r0, r5, #24
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	d501      	bpl.n	80050ca <_printf_i+0x196>
 80050c6:	6019      	str	r1, [r3, #0]
 80050c8:	e002      	b.n	80050d0 <_printf_i+0x19c>
 80050ca:	066a      	lsls	r2, r5, #25
 80050cc:	d5fb      	bpl.n	80050c6 <_printf_i+0x192>
 80050ce:	8019      	strh	r1, [r3, #0]
 80050d0:	2300      	movs	r3, #0
 80050d2:	6123      	str	r3, [r4, #16]
 80050d4:	4665      	mov	r5, ip
 80050d6:	e7b9      	b.n	800504c <_printf_i+0x118>
 80050d8:	6813      	ldr	r3, [r2, #0]
 80050da:	1d19      	adds	r1, r3, #4
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	681d      	ldr	r5, [r3, #0]
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	2100      	movs	r1, #0
 80050e4:	4628      	mov	r0, r5
 80050e6:	f7fb f87b 	bl	80001e0 <memchr>
 80050ea:	b108      	cbz	r0, 80050f0 <_printf_i+0x1bc>
 80050ec:	1b40      	subs	r0, r0, r5
 80050ee:	6060      	str	r0, [r4, #4]
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	2300      	movs	r3, #0
 80050f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fa:	e7a7      	b.n	800504c <_printf_i+0x118>
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	462a      	mov	r2, r5
 8005100:	4639      	mov	r1, r7
 8005102:	4630      	mov	r0, r6
 8005104:	47c0      	blx	r8
 8005106:	3001      	adds	r0, #1
 8005108:	d0aa      	beq.n	8005060 <_printf_i+0x12c>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	079b      	lsls	r3, r3, #30
 800510e:	d413      	bmi.n	8005138 <_printf_i+0x204>
 8005110:	68e0      	ldr	r0, [r4, #12]
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	4298      	cmp	r0, r3
 8005116:	bfb8      	it	lt
 8005118:	4618      	movlt	r0, r3
 800511a:	e7a3      	b.n	8005064 <_printf_i+0x130>
 800511c:	2301      	movs	r3, #1
 800511e:	464a      	mov	r2, r9
 8005120:	4639      	mov	r1, r7
 8005122:	4630      	mov	r0, r6
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d09a      	beq.n	8005060 <_printf_i+0x12c>
 800512a:	3501      	adds	r5, #1
 800512c:	68e3      	ldr	r3, [r4, #12]
 800512e:	9a03      	ldr	r2, [sp, #12]
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	42ab      	cmp	r3, r5
 8005134:	dcf2      	bgt.n	800511c <_printf_i+0x1e8>
 8005136:	e7eb      	b.n	8005110 <_printf_i+0x1dc>
 8005138:	2500      	movs	r5, #0
 800513a:	f104 0919 	add.w	r9, r4, #25
 800513e:	e7f5      	b.n	800512c <_printf_i+0x1f8>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1ac      	bne.n	800509e <_printf_i+0x16a>
 8005144:	7803      	ldrb	r3, [r0, #0]
 8005146:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800514a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800514e:	e76c      	b.n	800502a <_printf_i+0xf6>
 8005150:	080053f5 	.word	0x080053f5
 8005154:	08005406 	.word	0x08005406

08005158 <memcpy>:
 8005158:	b510      	push	{r4, lr}
 800515a:	1e43      	subs	r3, r0, #1
 800515c:	440a      	add	r2, r1
 800515e:	4291      	cmp	r1, r2
 8005160:	d100      	bne.n	8005164 <memcpy+0xc>
 8005162:	bd10      	pop	{r4, pc}
 8005164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516c:	e7f7      	b.n	800515e <memcpy+0x6>

0800516e <memmove>:
 800516e:	4288      	cmp	r0, r1
 8005170:	b510      	push	{r4, lr}
 8005172:	eb01 0302 	add.w	r3, r1, r2
 8005176:	d807      	bhi.n	8005188 <memmove+0x1a>
 8005178:	1e42      	subs	r2, r0, #1
 800517a:	4299      	cmp	r1, r3
 800517c:	d00a      	beq.n	8005194 <memmove+0x26>
 800517e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005182:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005186:	e7f8      	b.n	800517a <memmove+0xc>
 8005188:	4283      	cmp	r3, r0
 800518a:	d9f5      	bls.n	8005178 <memmove+0xa>
 800518c:	1881      	adds	r1, r0, r2
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	42d3      	cmn	r3, r2
 8005192:	d100      	bne.n	8005196 <memmove+0x28>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800519a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800519e:	e7f7      	b.n	8005190 <memmove+0x22>

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d045      	beq.n	8005234 <_free_r+0x94>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f000 f8d2 	bl	800535c <__malloc_lock>
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <_free_r+0x98>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	4610      	mov	r0, r2
 80051be:	b933      	cbnz	r3, 80051ce <_free_r+0x2e>
 80051c0:	6063      	str	r3, [r4, #4]
 80051c2:	6014      	str	r4, [r2, #0]
 80051c4:	4628      	mov	r0, r5
 80051c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ca:	f000 b8c8 	b.w	800535e <__malloc_unlock>
 80051ce:	42a3      	cmp	r3, r4
 80051d0:	d90c      	bls.n	80051ec <_free_r+0x4c>
 80051d2:	6821      	ldr	r1, [r4, #0]
 80051d4:	1862      	adds	r2, r4, r1
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bf04      	itt	eq
 80051da:	681a      	ldreq	r2, [r3, #0]
 80051dc:	685b      	ldreq	r3, [r3, #4]
 80051de:	6063      	str	r3, [r4, #4]
 80051e0:	bf04      	itt	eq
 80051e2:	1852      	addeq	r2, r2, r1
 80051e4:	6022      	streq	r2, [r4, #0]
 80051e6:	6004      	str	r4, [r0, #0]
 80051e8:	e7ec      	b.n	80051c4 <_free_r+0x24>
 80051ea:	4613      	mov	r3, r2
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	b10a      	cbz	r2, 80051f4 <_free_r+0x54>
 80051f0:	42a2      	cmp	r2, r4
 80051f2:	d9fa      	bls.n	80051ea <_free_r+0x4a>
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	1858      	adds	r0, r3, r1
 80051f8:	42a0      	cmp	r0, r4
 80051fa:	d10b      	bne.n	8005214 <_free_r+0x74>
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	4401      	add	r1, r0
 8005200:	1858      	adds	r0, r3, r1
 8005202:	4282      	cmp	r2, r0
 8005204:	6019      	str	r1, [r3, #0]
 8005206:	d1dd      	bne.n	80051c4 <_free_r+0x24>
 8005208:	6810      	ldr	r0, [r2, #0]
 800520a:	6852      	ldr	r2, [r2, #4]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	4401      	add	r1, r0
 8005210:	6019      	str	r1, [r3, #0]
 8005212:	e7d7      	b.n	80051c4 <_free_r+0x24>
 8005214:	d902      	bls.n	800521c <_free_r+0x7c>
 8005216:	230c      	movs	r3, #12
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	e7d3      	b.n	80051c4 <_free_r+0x24>
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	1821      	adds	r1, r4, r0
 8005220:	428a      	cmp	r2, r1
 8005222:	bf04      	itt	eq
 8005224:	6811      	ldreq	r1, [r2, #0]
 8005226:	6852      	ldreq	r2, [r2, #4]
 8005228:	6062      	str	r2, [r4, #4]
 800522a:	bf04      	itt	eq
 800522c:	1809      	addeq	r1, r1, r0
 800522e:	6021      	streq	r1, [r4, #0]
 8005230:	605c      	str	r4, [r3, #4]
 8005232:	e7c7      	b.n	80051c4 <_free_r+0x24>
 8005234:	bd38      	pop	{r3, r4, r5, pc}
 8005236:	bf00      	nop
 8005238:	200000b8 	.word	0x200000b8

0800523c <_malloc_r>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	1ccd      	adds	r5, r1, #3
 8005240:	f025 0503 	bic.w	r5, r5, #3
 8005244:	3508      	adds	r5, #8
 8005246:	2d0c      	cmp	r5, #12
 8005248:	bf38      	it	cc
 800524a:	250c      	movcc	r5, #12
 800524c:	2d00      	cmp	r5, #0
 800524e:	4606      	mov	r6, r0
 8005250:	db01      	blt.n	8005256 <_malloc_r+0x1a>
 8005252:	42a9      	cmp	r1, r5
 8005254:	d903      	bls.n	800525e <_malloc_r+0x22>
 8005256:	230c      	movs	r3, #12
 8005258:	6033      	str	r3, [r6, #0]
 800525a:	2000      	movs	r0, #0
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	f000 f87d 	bl	800535c <__malloc_lock>
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <_malloc_r+0xac>)
 8005264:	6814      	ldr	r4, [r2, #0]
 8005266:	4621      	mov	r1, r4
 8005268:	b991      	cbnz	r1, 8005290 <_malloc_r+0x54>
 800526a:	4c20      	ldr	r4, [pc, #128]	; (80052ec <_malloc_r+0xb0>)
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	b91b      	cbnz	r3, 8005278 <_malloc_r+0x3c>
 8005270:	4630      	mov	r0, r6
 8005272:	f000 f863 	bl	800533c <_sbrk_r>
 8005276:	6020      	str	r0, [r4, #0]
 8005278:	4629      	mov	r1, r5
 800527a:	4630      	mov	r0, r6
 800527c:	f000 f85e 	bl	800533c <_sbrk_r>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d124      	bne.n	80052ce <_malloc_r+0x92>
 8005284:	230c      	movs	r3, #12
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f868 	bl	800535e <__malloc_unlock>
 800528e:	e7e4      	b.n	800525a <_malloc_r+0x1e>
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	1b5b      	subs	r3, r3, r5
 8005294:	d418      	bmi.n	80052c8 <_malloc_r+0x8c>
 8005296:	2b0b      	cmp	r3, #11
 8005298:	d90f      	bls.n	80052ba <_malloc_r+0x7e>
 800529a:	600b      	str	r3, [r1, #0]
 800529c:	50cd      	str	r5, [r1, r3]
 800529e:	18cc      	adds	r4, r1, r3
 80052a0:	4630      	mov	r0, r6
 80052a2:	f000 f85c 	bl	800535e <__malloc_unlock>
 80052a6:	f104 000b 	add.w	r0, r4, #11
 80052aa:	1d23      	adds	r3, r4, #4
 80052ac:	f020 0007 	bic.w	r0, r0, #7
 80052b0:	1ac3      	subs	r3, r0, r3
 80052b2:	d0d3      	beq.n	800525c <_malloc_r+0x20>
 80052b4:	425a      	negs	r2, r3
 80052b6:	50e2      	str	r2, [r4, r3]
 80052b8:	e7d0      	b.n	800525c <_malloc_r+0x20>
 80052ba:	428c      	cmp	r4, r1
 80052bc:	684b      	ldr	r3, [r1, #4]
 80052be:	bf16      	itet	ne
 80052c0:	6063      	strne	r3, [r4, #4]
 80052c2:	6013      	streq	r3, [r2, #0]
 80052c4:	460c      	movne	r4, r1
 80052c6:	e7eb      	b.n	80052a0 <_malloc_r+0x64>
 80052c8:	460c      	mov	r4, r1
 80052ca:	6849      	ldr	r1, [r1, #4]
 80052cc:	e7cc      	b.n	8005268 <_malloc_r+0x2c>
 80052ce:	1cc4      	adds	r4, r0, #3
 80052d0:	f024 0403 	bic.w	r4, r4, #3
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d005      	beq.n	80052e4 <_malloc_r+0xa8>
 80052d8:	1a21      	subs	r1, r4, r0
 80052da:	4630      	mov	r0, r6
 80052dc:	f000 f82e 	bl	800533c <_sbrk_r>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d0cf      	beq.n	8005284 <_malloc_r+0x48>
 80052e4:	6025      	str	r5, [r4, #0]
 80052e6:	e7db      	b.n	80052a0 <_malloc_r+0x64>
 80052e8:	200000b8 	.word	0x200000b8
 80052ec:	200000bc 	.word	0x200000bc

080052f0 <_realloc_r>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	4607      	mov	r7, r0
 80052f4:	4614      	mov	r4, r2
 80052f6:	460e      	mov	r6, r1
 80052f8:	b921      	cbnz	r1, 8005304 <_realloc_r+0x14>
 80052fa:	4611      	mov	r1, r2
 80052fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005300:	f7ff bf9c 	b.w	800523c <_malloc_r>
 8005304:	b922      	cbnz	r2, 8005310 <_realloc_r+0x20>
 8005306:	f7ff ff4b 	bl	80051a0 <_free_r>
 800530a:	4625      	mov	r5, r4
 800530c:	4628      	mov	r0, r5
 800530e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005310:	f000 f826 	bl	8005360 <_malloc_usable_size_r>
 8005314:	42a0      	cmp	r0, r4
 8005316:	d20f      	bcs.n	8005338 <_realloc_r+0x48>
 8005318:	4621      	mov	r1, r4
 800531a:	4638      	mov	r0, r7
 800531c:	f7ff ff8e 	bl	800523c <_malloc_r>
 8005320:	4605      	mov	r5, r0
 8005322:	2800      	cmp	r0, #0
 8005324:	d0f2      	beq.n	800530c <_realloc_r+0x1c>
 8005326:	4631      	mov	r1, r6
 8005328:	4622      	mov	r2, r4
 800532a:	f7ff ff15 	bl	8005158 <memcpy>
 800532e:	4631      	mov	r1, r6
 8005330:	4638      	mov	r0, r7
 8005332:	f7ff ff35 	bl	80051a0 <_free_r>
 8005336:	e7e9      	b.n	800530c <_realloc_r+0x1c>
 8005338:	4635      	mov	r5, r6
 800533a:	e7e7      	b.n	800530c <_realloc_r+0x1c>

0800533c <_sbrk_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4c06      	ldr	r4, [pc, #24]	; (8005358 <_sbrk_r+0x1c>)
 8005340:	2300      	movs	r3, #0
 8005342:	4605      	mov	r5, r0
 8005344:	4608      	mov	r0, r1
 8005346:	6023      	str	r3, [r4, #0]
 8005348:	f7fb ff8e 	bl	8001268 <_sbrk>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_sbrk_r+0x1a>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	b103      	cbz	r3, 8005356 <_sbrk_r+0x1a>
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	20000720 	.word	0x20000720

0800535c <__malloc_lock>:
 800535c:	4770      	bx	lr

0800535e <__malloc_unlock>:
 800535e:	4770      	bx	lr

08005360 <_malloc_usable_size_r>:
 8005360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005364:	1f18      	subs	r0, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfbc      	itt	lt
 800536a:	580b      	ldrlt	r3, [r1, r0]
 800536c:	18c0      	addlt	r0, r0, r3
 800536e:	4770      	bx	lr

08005370 <_init>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr

0800537c <_fini>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr
